// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

#include <chrono>
#include <nlohmann/json.hpp>
#include <ravl/attestation.h>
#include <ravl/http_client.h>
#include <ravl/oe.h>
#include <ravl/ravl.h>
#include <ravl/request_tracker.h>
#include <ravl/sev_snp.h>
#include <ravl/sgx.h>
#include <ravl/util.h>
#include <string>

#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN
#include <doctest.h>

using namespace ravl;

Options default_options = {
  .verbosity = 0,
  .certificate_verification = {.ignore_time = true},
  .http_max_attempts = 25};

/* clang-format off */
std::string oe_coffeelake_attestation = R"({
  "source": "openenclave",
  "evidence": "AwACAAAAAAAIAA0Ak5pyM/ecTKmUCg2zlX8GByV7poCkzztBEA1BOoP0LTUAAAAAExMCB/+ABgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwAAAAAAAAAHAAAAAAAAAL+GiaH9s4KO+lbZ8joVJOwfFkGWioERZbcEz2F49+ALAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABYAJZJn5IkTD587Qd7hqG0hMYUwp/HikFCd6JbwZEmKwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADrJdgfT2OVVBjgFfTo5mAXKqsKIHwd6dJv2Eh35eavyAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARBAAAFwOiY5gHFvAX3ASQ1Nh6SzoZHgNbv/fEXRJLwZxq1K2IJKEC2/8bCfYWQDZSCAe6yynuHkC3AJfB9a82FetQJpBWxRiC4Pxuqak78F0MDYo2IQy0PPTta8rsRgAZV3bfZj+xSqjHCfGZIhcoy7C1WCCXBlyL/EkDPTjDQqfJc4cExMCB/+ABgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFQAAAAAAAAAHAAAAAAAAAIzlhoW+NuRhh8Izx+me1v5127M/dWetohewd+zYz4L5AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACMT1d115ZQPpYTf3fGioKaAFasje1wFAsIGwlEkMV7/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADaeHiXlftEWtCNsuUhLnySVEgAQYfKtaGgDAAVzDMzdAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAjGzAvqVqMFAZBhm+ZXw077rHYxYB/xb3izTOcK9RdQPoy7LkdysbJaKSZh4wSYpv0Vo68mC0liNyw68kKXvRMiAAAAECAwQFBgcICQoLDA0ODxAREhMUFRYXGBkaGxwdHh8FANwNAAAtLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJRWpUQ0NCRFNnQXdJQkFnSVZBTDEzdExSZURGVnFSZFc2L2s3ZG1HY0pCSXduTUFvR0NDcUdTTTQ5QkFNQwpNSEV4SXpBaEJnTlZCQU1NR2tsdWRHVnNJRk5IV0NCUVEwc2dVSEp2WTJWemMyOXlJRU5CTVJvd0dBWURWUVFLCkRCRkpiblJsYkNCRGIzSndiM0poZEdsdmJqRVVNQklHQTFVRUJ3d0xVMkZ1ZEdFZ1EyeGhjbUV4Q3pBSkJnTlYKQkFnTUFrTkJNUXN3Q1FZRFZRUUdFd0pWVXpBZUZ3MHlNakEzTVRjd01ETTVNak5hRncweU9UQTNNVGN3TURNNQpNak5hTUhBeElqQWdCZ05WQkFNTUdVbHVkR1ZzSUZOSFdDQlFRMHNnUTJWeWRHbG1hV05oZEdVeEdqQVlCZ05WCkJBb01FVWx1ZEdWc0lFTnZjbkJ2Y21GMGFXOXVNUlF3RWdZRFZRUUhEQXRUWVc1MFlTQkRiR0Z5WVRFTE1Ba0cKQTFVRUNBd0NRMEV4Q3pBSkJnTlZCQVlUQWxWVE1Ga3dFd1lIS29aSXpqMENBUVlJS29aSXpqMERBUWNEUWdBRQoxdGc4aDBhTDRDTW81cTZUV3JNa2IrWi8wWEs2ZU9Nc3NLYTEzbXZwWTZMUUN6ZnFzRDdvTUh5ODlHNVhmK2lrCkxxMW9mdlc4czdhV0RUSithMGExdEtPQ0FxZ3dnZ0trTUI4R0ExVWRJd1FZTUJhQUZORG9xdHAxMS9rdVNSZVkKUEhzVVpkRFY4bGxOTUd3R0ExVWRId1JsTUdNd1lhQmZvRjJHVzJoMGRIQnpPaTh2WVhCcExuUnlkWE4wWldSegpaWEoyYVdObGN5NXBiblJsYkM1amIyMHZjMmQ0TDJObGNuUnBabWxqWVhScGIyNHZkak12Y0dOclkzSnNQMk5oClBYQnliMk5sYzNOdmNpWmxibU52WkdsdVp6MWtaWEl3SFFZRFZSME9CQllFRkI1VmxaTitSaEdUVS9KMUpjeDcKbE5Sc0xpVXRNQTRHQTFVZER3RUIvd1FFQXdJR3dEQU1CZ05WSFJNQkFmOEVBakFBTUlJQjFBWUpLb1pJaHZoTgpBUTBCQklJQnhUQ0NBY0V3SGdZS0tvWklodmhOQVEwQkFRUVE3STA4cS9pZ3laYmh6S3FiblpTSDNqQ0NBV1FHCkNpcUdTSWI0VFFFTkFRSXdnZ0ZVTUJBR0N5cUdTSWI0VFFFTkFRSUJBZ0VSTUJBR0N5cUdTSWI0VFFFTkFRSUMKQWdFUk1CQUdDeXFHU0liNFRRRU5BUUlEQWdFQ01CQUdDeXFHU0liNFRRRU5BUUlFQWdFRU1CQUdDeXFHU0liNApUUUVOQVFJRkFnRUJNQkVHQ3lxR1NJYjRUUUVOQVFJR0FnSUFnREFRQmdzcWhraUcrRTBCRFFFQ0J3SUJCakFRCkJnc3Foa2lHK0UwQkRRRUNDQUlCQURBUUJnc3Foa2lHK0UwQkRRRUNDUUlCQURBUUJnc3Foa2lHK0UwQkRRRUMKQ2dJQkFEQVFCZ3NxaGtpRytFMEJEUUVDQ3dJQkFEQVFCZ3NxaGtpRytFMEJEUUVDREFJQkFEQVFCZ3NxaGtpRworRTBCRFFFQ0RRSUJBREFRQmdzcWhraUcrRTBCRFFFQ0RnSUJBREFRQmdzcWhraUcrRTBCRFFFQ0R3SUJBREFRCkJnc3Foa2lHK0UwQkRRRUNFQUlCQURBUUJnc3Foa2lHK0UwQkRRRUNFUUlCQ3pBZkJnc3Foa2lHK0UwQkRRRUMKRWdRUUVSRUNCQUdBQmdBQUFBQUFBQUFBQURBUUJnb3Foa2lHK0UwQkRRRURCQUlBQURBVUJnb3Foa2lHK0UwQgpEUUVFQkFZQWtHN1ZBQUF3RHdZS0tvWklodmhOQVEwQkJRb0JBREFLQmdncWhrak9QUVFEQWdOSEFEQkVBaUFVCkp5U1A3YkhpZjM2eEhEN2dmTTFHSEFGL1AvMy80azIzQ2k3OFAxTFQwZ0lnY3BqemNwbEJTbjNjSXMwNzNoY0QKREFxZ0U4L3NtdmNIdng5cDJ3TitBOG89Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNtRENDQWo2Z0F3SUJBZ0lWQU5Eb3F0cDExL2t1U1JlWVBIc1VaZERWOGxsTk1Bb0dDQ3FHU000OUJBTUMKTUdneEdqQVlCZ05WQkFNTUVVbHVkR1ZzSUZOSFdDQlNiMjkwSUVOQk1Sb3dHQVlEVlFRS0RCRkpiblJsYkNCRApiM0p3YjNKaGRHbHZiakVVTUJJR0ExVUVCd3dMVTJGdWRHRWdRMnhoY21FeEN6QUpCZ05WQkFnTUFrTkJNUXN3CkNRWURWUVFHRXdKVlV6QWVGdzB4T0RBMU1qRXhNRFV3TVRCYUZ3MHpNekExTWpFeE1EVXdNVEJhTUhFeEl6QWgKQmdOVkJBTU1Ha2x1ZEdWc0lGTkhXQ0JRUTBzZ1VISnZZMlZ6YzI5eUlFTkJNUm93R0FZRFZRUUtEQkZKYm5SbApiQ0JEYjNKd2IzSmhkR2x2YmpFVU1CSUdBMVVFQnd3TFUyRnVkR0VnUTJ4aGNtRXhDekFKQmdOVkJBZ01Ba05CCk1Rc3dDUVlEVlFRR0V3SlZVekJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCTDlxK05NcDJJT2cKdGRsMWJrL3VXWjUrVEdRbThhQ2k4ejc4ZnMrZktDUTNkK3VEelhuVlRBVDJaaERDaWZ5SXVKd3ZOM3dOQnA5aQpIQlNTTUpNSnJCT2pnYnN3Z2Jnd0h3WURWUjBqQkJnd0ZvQVVJbVVNMWxxZE5JbnpnN1NWVXI5UUd6a25CcXd3ClVnWURWUjBmQkVzd1NUQkhvRVdnUTRaQmFIUjBjSE02THk5alpYSjBhV1pwWTJGMFpYTXVkSEoxYzNSbFpITmwKY25acFkyVnpMbWx1ZEdWc0xtTnZiUzlKYm5SbGJGTkhXRkp2YjNSRFFTNWtaWEl3SFFZRFZSME9CQllFRk5EbwpxdHAxMS9rdVNSZVlQSHNVWmREVjhsbE5NQTRHQTFVZER3RUIvd1FFQXdJQkJqQVNCZ05WSFJNQkFmOEVDREFHCkFRSC9BZ0VBTUFvR0NDcUdTTTQ5QkFNQ0EwZ0FNRVVDSVFDSmdUYnRWcU95WjFtM2pxaUFYTTZRWWE2cjVzV1MKNHkvRzd5OHVJSkd4ZHdJZ1JxUHZCU0t6elFhZ0JMUXE1czVBNzBwZG9pYVJKOHovMHVEejROZ1Y5MWs9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNqekNDQWpTZ0F3SUJBZ0lVSW1VTTFscWROSW56ZzdTVlVyOVFHemtuQnF3d0NnWUlLb1pJemowRUF3SXcKYURFYU1CZ0dBMVVFQXd3UlNXNTBaV3dnVTBkWUlGSnZiM1FnUTBFeEdqQVlCZ05WQkFvTUVVbHVkR1ZzSUVOdgpjbkJ2Y21GMGFXOXVNUlF3RWdZRFZRUUhEQXRUWVc1MFlTQkRiR0Z5WVRFTE1Ba0dBMVVFQ0F3Q1EwRXhDekFKCkJnTlZCQVlUQWxWVE1CNFhEVEU0TURVeU1URXdORFV4TUZvWERUUTVNVEl6TVRJek5UazFPVm93YURFYU1CZ0cKQTFVRUF3d1JTVzUwWld3Z1UwZFlJRkp2YjNRZ1EwRXhHakFZQmdOVkJBb01FVWx1ZEdWc0lFTnZjbkJ2Y21GMAphVzl1TVJRd0VnWURWUVFIREF0VFlXNTBZU0JEYkdGeVlURUxNQWtHQTFVRUNBd0NRMEV4Q3pBSkJnTlZCQVlUCkFsVlRNRmt3RXdZSEtvWkl6ajBDQVFZSUtvWkl6ajBEQVFjRFFnQUVDNm5Fd01ESVlaT2ovaVBXc0N6YUVLaTcKMU9pT1NMUkZoV0dqYm5CVkpmVm5rWTR1M0lqa0RZWUwwTXhPNG1xc3lZamxCYWxUVll4RlAyc0pCSzV6bEtPQgp1ekNCdURBZkJnTlZIU01FR0RBV2dCUWlaUXpXV3AwMGlmT0R0SlZTdjFBYk9TY0dyREJTQmdOVkhSOEVTekJKCk1FZWdSYUJEaGtGb2RIUndjem92TDJObGNuUnBabWxqWVhSbGN5NTBjblZ6ZEdWa2MyVnlkbWxqWlhNdWFXNTAKWld3dVkyOXRMMGx1ZEdWc1UwZFlVbTl2ZEVOQkxtUmxjakFkQmdOVkhRNEVGZ1FVSW1VTTFscWROSW56ZzdTVgpVcjlRR3prbkJxd3dEZ1lEVlIwUEFRSC9CQVFEQWdFR01CSUdBMVVkRXdFQi93UUlNQVlCQWY4Q0FRRXdDZ1lJCktvWkl6ajBFQXdJRFNRQXdSZ0loQU9XLzVRa1IrUzlDaVNEY05vb3dMdVBSTHNXR2YvWWk3R1NYOTRCZ3dUd2cKQWlFQTRKMGxySG9NcytYbzVvL3NYNk85UVd4SFJBdlpVR09kUlE3Y3ZxUlhhcUk9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KAAEAAAAAAAAAAQAAAAAAAAAKAAAAAAAAAAsAAAAAAAAAc29tZV9uYW1lAHNvbWVfdmFsdWUA",
  "endorsements": ""
})";

std::string oe_icelake_attestation = R"({
  "source": "openenclave",
  "evidence": "AwACAAAAAAAIAA0Ak5pyM/ecTKmUCg2zlX8GBywpOQ3mxF2XdC+3LWhQiwkAAAAACAgODf//AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwAAAAAAAAAHAAAAAAAAAN1yOYDXU051MTvduxQ0HWOgNXuR2eE2mY/doOIgtmTIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAG3Oihbr8X2K6L7RidRQHMdcVYX5TcMVztOSbthx6NWgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADrJdgfT2OVVBjgFfTo5mAXKqsKIHwd6dJv2Eh35eavyAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAxhAAAJ0zD6GXWZ4uIx+MOw2QWPm9tpFw7lFp6dVn4O5DlEfBwugvXEG1Y3Bndkzyo9XXYpr5HXLdEeSsQwTEmMgVdYNwI5DNkGyZLixfzDkeurF3juwGxhN4F86DaR76+aBhOoVEnvwXbYM/JVmpEpLZCjKzTm2he6J87nU+TIJmcsctCAgODf//AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFQAAAAAAAADnAAAAAAAAAIzlhoW+NuRhh8Izx+me1v5127M/dWetohewd+zYz4L5AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACMT1d115ZQPpYTf3fGioKaAFasje1wFAsIGwlEkMV7/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB/Z2jWySzHGBl9TOc39+aCOmGXfNesXR17QKT8/k+x9gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8gS3xpre3Bqm9kLCz9xAWh9Vbgx9H9jCX0TTiDrvzA095Chr7rqzO56wfQ27Dyd45xHyB6OxHNgGTduNPdUUpiAAAAECAwQFBgcICQoLDA0ODxAREhMUFRYXGBkaGxwdHh8FAF4OAAAtLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJRThUQ0NCSmlnQXdJQkFnSVVZWGZFL2ZDRDJMR3hWai9MOU5JMWZUZFN4dmt3Q2dZSUtvWkl6ajBFQXdJdwpjREVpTUNBR0ExVUVBd3daU1c1MFpXd2dVMGRZSUZCRFN5QlFiR0YwWm05eWJTQkRRVEVhTUJnR0ExVUVDZ3dSClNXNTBaV3dnUTI5eWNHOXlZWFJwYjI0eEZEQVNCZ05WQkFjTUMxTmhiblJoSUVOc1lYSmhNUXN3Q1FZRFZRUUkKREFKRFFURUxNQWtHQTFVRUJoTUNWVk13SGhjTk1qSXdOVEl6TURBMU56STNXaGNOTWprd05USXpNREExTnpJMwpXakJ3TVNJd0lBWURWUVFEREJsSmJuUmxiQ0JUUjFnZ1VFTkxJRU5sY25ScFptbGpZWFJsTVJvd0dBWURWUVFLCkRCRkpiblJsYkNCRGIzSndiM0poZEdsdmJqRVVNQklHQTFVRUJ3d0xVMkZ1ZEdFZ1EyeGhjbUV4Q3pBSkJnTlYKQkFnTUFrTkJNUXN3Q1FZRFZRUUdFd0pWVXpCWk1CTUdCeXFHU000OUFnRUdDQ3FHU000OUF3RUhBMElBQk4vcApodEtkMndhYXRXWWtNS0YwcWhPSXBxTGRTajJYc3REQS9aZSs0cFN2Y21BMkptcG5SeGo2SC9RTkdEaUdlaG80CjVxUVEyMmZWb0VyNTVzTTFaak9qZ2dNT01JSURDakFmQmdOVkhTTUVHREFXZ0JTVmIxM052UnZoNlVCSnlkVDAKTTg0QlZ3dmVWREJyQmdOVkhSOEVaREJpTUdDZ1hxQmNobHBvZEhSd2N6b3ZMMkZ3YVM1MGNuVnpkR1ZrYzJWeQpkbWxqWlhNdWFXNTBaV3d1WTI5dEwzTm5lQzlqWlhKMGFXWnBZMkYwYVc5dUwzWXpMM0JqYTJOeWJEOWpZVDF3CmJHRjBabTl5YlNabGJtTnZaR2x1Wnoxa1pYSXdIUVlEVlIwT0JCWUVGQm5sbGk4bFlFc1h3TzJDMVVVUzBoRW0KT1lxYk1BNEdBMVVkRHdFQi93UUVBd0lHd0RBTUJnTlZIUk1CQWY4RUFqQUFNSUlDT3dZSktvWklodmhOQVEwQgpCSUlDTERDQ0FpZ3dIZ1lLS29aSWh2aE5BUTBCQVFRUXpKR1c5MGxzdlBTZldteDV4Q0NnUURDQ0FXVUdDaXFHClNJYjRUUUVOQVFJd2dnRlZNQkFHQ3lxR1NJYjRUUUVOQVFJQkFnRUVNQkFHQ3lxR1NJYjRUUUVOQVFJQ0FnRUUKTUJBR0N5cUdTSWI0VFFFTkFRSURBZ0VETUJBR0N5cUdTSWI0VFFFTkFRSUVBZ0VETUJFR0N5cUdTSWI0VFFFTgpBUUlGQWdJQS96QVJCZ3NxaGtpRytFMEJEUUVDQmdJQ0FQOHdFQVlMS29aSWh2aE5BUTBCQWdjQ0FRQXdFQVlMCktvWklodmhOQVEwQkFnZ0NBUUF3RUFZTEtvWklodmhOQVEwQkFna0NBUUF3RUFZTEtvWklodmhOQVEwQkFnb0MKQVFBd0VBWUxLb1pJaHZoTkFRMEJBZ3NDQVFBd0VBWUxLb1pJaHZoTkFRMEJBZ3dDQVFBd0VBWUxLb1pJaHZoTgpBUTBCQWcwQ0FRQXdFQVlMS29aSWh2aE5BUTBCQWc0Q0FRQXdFQVlMS29aSWh2aE5BUTBCQWc4Q0FRQXdFQVlMCktvWklodmhOQVEwQkFoQUNBUUF3RUFZTEtvWklodmhOQVEwQkFoRUNBUXN3SHdZTEtvWklodmhOQVEwQkFoSUUKRUFRRUF3UC8vd0FBQUFBQUFBQUFBQUF3RUFZS0tvWklodmhOQVEwQkF3UUNBQUF3RkFZS0tvWklodmhOQVEwQgpCQVFHQUdCcUFBQUFNQThHQ2lxR1NJYjRUUUVOQVFVS0FRRXdIZ1lLS29aSWh2aE5BUTBCQmdRUXA1RURURWtrCjRrbVVEVlZZc3laQkpEQkVCZ29xaGtpRytFMEJEUUVITURZd0VBWUxLb1pJaHZoTkFRMEJCd0VCQWY4d0VBWUwKS29aSWh2aE5BUTBCQndJQkFRQXdFQVlMS29aSWh2aE5BUTBCQndNQkFmOHdDZ1lJS29aSXpqMEVBd0lEUndBdwpSQUlnWGxwVWRBYjRGQkpYWEFPeGpSTFZYd21mZXp2SVpQYithL2RSQ3NvS2dOWUNJQWY1TzJjZHA4T1VLYTV4CmdSQUo0eTN4TUg4ZTBJMVQrYjdXV3FML0dkYU4KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJQ2xqQ0NBajJnQXdJQkFnSVZBSlZ2WGMyOUcrSHBRRW5KMVBRenpnRlhDOTVVTUFvR0NDcUdTTTQ5QkFNQwpNR2d4R2pBWUJnTlZCQU1NRVVsdWRHVnNJRk5IV0NCU2IyOTBJRU5CTVJvd0dBWURWUVFLREJGSmJuUmxiQ0JECmIzSndiM0poZEdsdmJqRVVNQklHQTFVRUJ3d0xVMkZ1ZEdFZ1EyeGhjbUV4Q3pBSkJnTlZCQWdNQWtOQk1Rc3cKQ1FZRFZRUUdFd0pWVXpBZUZ3MHhPREExTWpFeE1EVXdNVEJhRncwek16QTFNakV4TURVd01UQmFNSEF4SWpBZwpCZ05WQkFNTUdVbHVkR1ZzSUZOSFdDQlFRMHNnVUd4aGRHWnZjbTBnUTBFeEdqQVlCZ05WQkFvTUVVbHVkR1ZzCklFTnZjbkJ2Y21GMGFXOXVNUlF3RWdZRFZRUUhEQXRUWVc1MFlTQkRiR0Z5WVRFTE1Ba0dBMVVFQ0F3Q1EwRXgKQ3pBSkJnTlZCQVlUQWxWVE1Ga3dFd1lIS29aSXpqMENBUVlJS29aSXpqMERBUWNEUWdBRU5TQi83dDIxbFhTTwoyQ3V6cHh3NzRlSkI3MkV5REdnVzVyWEN0eDJ0VlRMcTZoS2s2eitVaVJaQ25xUjdwc092Z3FGZVN4bG1UbEpsCmVUbWkyV1l6M3FPQnV6Q0J1REFmQmdOVkhTTUVHREFXZ0JRaVpReldXcDAwaWZPRHRKVlN2MUFiT1NjR3JEQlMKQmdOVkhSOEVTekJKTUVlZ1JhQkRoa0ZvZEhSd2N6b3ZMMk5sY25ScFptbGpZWFJsY3k1MGNuVnpkR1ZrYzJWeQpkbWxqWlhNdWFXNTBaV3d1WTI5dEwwbHVkR1ZzVTBkWVVtOXZkRU5CTG1SbGNqQWRCZ05WSFE0RUZnUVVsVzlkCnpiMGI0ZWxBU2NuVTlEUE9BVmNMM2xRd0RnWURWUjBQQVFIL0JBUURBZ0VHTUJJR0ExVWRFd0VCL3dRSU1BWUIKQWY4Q0FRQXdDZ1lJS29aSXpqMEVBd0lEUndBd1JBSWdYc1ZraTB3K2k2VllHVzNVRi8yMnVhWGUwWUpEajFVZQpuQStUakQxYWk1Y0NJQ1liMVNBbUQ1eGtmVFZwdm80VW95aVNZeHJEV0xtVVI0Q0k5Tkt5ZlBOKwotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlDanpDQ0FqU2dBd0lCQWdJVUltVU0xbHFkTkluemc3U1ZVcjlRR3prbkJxd3dDZ1lJS29aSXpqMEVBd0l3CmFERWFNQmdHQTFVRUF3d1JTVzUwWld3Z1UwZFlJRkp2YjNRZ1EwRXhHakFZQmdOVkJBb01FVWx1ZEdWc0lFTnYKY25CdmNtRjBhVzl1TVJRd0VnWURWUVFIREF0VFlXNTBZU0JEYkdGeVlURUxNQWtHQTFVRUNBd0NRMEV4Q3pBSgpCZ05WQkFZVEFsVlRNQjRYRFRFNE1EVXlNVEV3TkRVeE1Gb1hEVFE1TVRJek1USXpOVGsxT1Zvd2FERWFNQmdHCkExVUVBd3dSU1c1MFpXd2dVMGRZSUZKdmIzUWdRMEV4R2pBWUJnTlZCQW9NRVVsdWRHVnNJRU52Y25CdmNtRjAKYVc5dU1SUXdFZ1lEVlFRSERBdFRZVzUwWVNCRGJHRnlZVEVMTUFrR0ExVUVDQXdDUTBFeEN6QUpCZ05WQkFZVApBbFZUTUZrd0V3WUhLb1pJemowQ0FRWUlLb1pJemowREFRY0RRZ0FFQzZuRXdNRElZWk9qL2lQV3NDemFFS2k3CjFPaU9TTFJGaFdHamJuQlZKZlZua1k0dTNJamtEWVlMME14TzRtcXN5WWpsQmFsVFZZeEZQMnNKQks1emxLT0IKdXpDQnVEQWZCZ05WSFNNRUdEQVdnQlFpWlF6V1dwMDBpZk9EdEpWU3YxQWJPU2NHckRCU0JnTlZIUjhFU3pCSgpNRWVnUmFCRGhrRm9kSFJ3Y3pvdkwyTmxjblJwWm1sallYUmxjeTUwY25WemRHVmtjMlZ5ZG1salpYTXVhVzUwClpXd3VZMjl0TDBsdWRHVnNVMGRZVW05dmRFTkJMbVJsY2pBZEJnTlZIUTRFRmdRVUltVU0xbHFkTkluemc3U1YKVXI5UUd6a25CcXd3RGdZRFZSMFBBUUgvQkFRREFnRUdNQklHQTFVZEV3RUIvd1FJTUFZQkFmOENBUUV3Q2dZSQpLb1pJemowRUF3SURTUUF3UmdJaEFPVy81UWtSK1M5Q2lTRGNOb293THVQUkxzV0dmL1lpN0dTWDk0Qmd3VHdnCkFpRUE0SjBsckhvTXMrWG81by9zWDZPOVFXeEhSQXZaVUdPZFJRN2N2cVJYYXFJPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCgABAAAAAAAAAAEAAAAAAAAACgAAAAAAAAALAAAAAAAAAHNvbWVfbmFtZQBzb21lX3ZhbHVlAA==",
  "endorsements": ""
})";

std::string coffeelake_quote = R"({
  "source": "sgx",
  "evidence": "AwACAAAAAAAIAA0Ak5pyM/ecTKmUCg2zlX8GByV7poCkzztBEA1BOoP0LTUAAAAAExMCB/+ABgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwAAAAAAAAAHAAAAAAAAAL+GiaH9s4KO+lbZ8joVJOwfFkGWioERZbcEz2F49+ALAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABYAJZJn5IkTD587Qd7hqG0hMYUwp/HikFCd6JbwZEmKwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADrJdgfT2OVVBjgFfTo5mAXKqsKIHwd6dJv2Eh35eavyAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARBAAAFwOiY5gHFvAX3ASQ1Nh6SzoZHgNbv/fEXRJLwZxq1K2IJKEC2/8bCfYWQDZSCAe6yynuHkC3AJfB9a82FetQJpBWxRiC4Pxuqak78F0MDYo2IQy0PPTta8rsRgAZV3bfZj+xSqjHCfGZIhcoy7C1WCCXBlyL/EkDPTjDQqfJc4cExMCB/+ABgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFQAAAAAAAAAHAAAAAAAAAIzlhoW+NuRhh8Izx+me1v5127M/dWetohewd+zYz4L5AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACMT1d115ZQPpYTf3fGioKaAFasje1wFAsIGwlEkMV7/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADaeHiXlftEWtCNsuUhLnySVEgAQYfKtaGgDAAVzDMzdAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAjGzAvqVqMFAZBhm+ZXw077rHYxYB/xb3izTOcK9RdQPoy7LkdysbJaKSZh4wSYpv0Vo68mC0liNyw68kKXvRMiAAAAECAwQFBgcICQoLDA0ODxAREhMUFRYXGBkaGxwdHh8FANwNAAAtLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJRWpUQ0NCRFNnQXdJQkFnSVZBTDEzdExSZURGVnFSZFc2L2s3ZG1HY0pCSXduTUFvR0NDcUdTTTQ5QkFNQwpNSEV4SXpBaEJnTlZCQU1NR2tsdWRHVnNJRk5IV0NCUVEwc2dVSEp2WTJWemMyOXlJRU5CTVJvd0dBWURWUVFLCkRCRkpiblJsYkNCRGIzSndiM0poZEdsdmJqRVVNQklHQTFVRUJ3d0xVMkZ1ZEdFZ1EyeGhjbUV4Q3pBSkJnTlYKQkFnTUFrTkJNUXN3Q1FZRFZRUUdFd0pWVXpBZUZ3MHlNakEzTVRjd01ETTVNak5hRncweU9UQTNNVGN3TURNNQpNak5hTUhBeElqQWdCZ05WQkFNTUdVbHVkR1ZzSUZOSFdDQlFRMHNnUTJWeWRHbG1hV05oZEdVeEdqQVlCZ05WCkJBb01FVWx1ZEdWc0lFTnZjbkJ2Y21GMGFXOXVNUlF3RWdZRFZRUUhEQXRUWVc1MFlTQkRiR0Z5WVRFTE1Ba0cKQTFVRUNBd0NRMEV4Q3pBSkJnTlZCQVlUQWxWVE1Ga3dFd1lIS29aSXpqMENBUVlJS29aSXpqMERBUWNEUWdBRQoxdGc4aDBhTDRDTW81cTZUV3JNa2IrWi8wWEs2ZU9Nc3NLYTEzbXZwWTZMUUN6ZnFzRDdvTUh5ODlHNVhmK2lrCkxxMW9mdlc4czdhV0RUSithMGExdEtPQ0FxZ3dnZ0trTUI4R0ExVWRJd1FZTUJhQUZORG9xdHAxMS9rdVNSZVkKUEhzVVpkRFY4bGxOTUd3R0ExVWRId1JsTUdNd1lhQmZvRjJHVzJoMGRIQnpPaTh2WVhCcExuUnlkWE4wWldSegpaWEoyYVdObGN5NXBiblJsYkM1amIyMHZjMmQ0TDJObGNuUnBabWxqWVhScGIyNHZkak12Y0dOclkzSnNQMk5oClBYQnliMk5sYzNOdmNpWmxibU52WkdsdVp6MWtaWEl3SFFZRFZSME9CQllFRkI1VmxaTitSaEdUVS9KMUpjeDcKbE5Sc0xpVXRNQTRHQTFVZER3RUIvd1FFQXdJR3dEQU1CZ05WSFJNQkFmOEVBakFBTUlJQjFBWUpLb1pJaHZoTgpBUTBCQklJQnhUQ0NBY0V3SGdZS0tvWklodmhOQVEwQkFRUVE3STA4cS9pZ3laYmh6S3FiblpTSDNqQ0NBV1FHCkNpcUdTSWI0VFFFTkFRSXdnZ0ZVTUJBR0N5cUdTSWI0VFFFTkFRSUJBZ0VSTUJBR0N5cUdTSWI0VFFFTkFRSUMKQWdFUk1CQUdDeXFHU0liNFRRRU5BUUlEQWdFQ01CQUdDeXFHU0liNFRRRU5BUUlFQWdFRU1CQUdDeXFHU0liNApUUUVOQVFJRkFnRUJNQkVHQ3lxR1NJYjRUUUVOQVFJR0FnSUFnREFRQmdzcWhraUcrRTBCRFFFQ0J3SUJCakFRCkJnc3Foa2lHK0UwQkRRRUNDQUlCQURBUUJnc3Foa2lHK0UwQkRRRUNDUUlCQURBUUJnc3Foa2lHK0UwQkRRRUMKQ2dJQkFEQVFCZ3NxaGtpRytFMEJEUUVDQ3dJQkFEQVFCZ3NxaGtpRytFMEJEUUVDREFJQkFEQVFCZ3NxaGtpRworRTBCRFFFQ0RRSUJBREFRQmdzcWhraUcrRTBCRFFFQ0RnSUJBREFRQmdzcWhraUcrRTBCRFFFQ0R3SUJBREFRCkJnc3Foa2lHK0UwQkRRRUNFQUlCQURBUUJnc3Foa2lHK0UwQkRRRUNFUUlCQ3pBZkJnc3Foa2lHK0UwQkRRRUMKRWdRUUVSRUNCQUdBQmdBQUFBQUFBQUFBQURBUUJnb3Foa2lHK0UwQkRRRURCQUlBQURBVUJnb3Foa2lHK0UwQgpEUUVFQkFZQWtHN1ZBQUF3RHdZS0tvWklodmhOQVEwQkJRb0JBREFLQmdncWhrak9QUVFEQWdOSEFEQkVBaUFVCkp5U1A3YkhpZjM2eEhEN2dmTTFHSEFGL1AvMy80azIzQ2k3OFAxTFQwZ0lnY3BqemNwbEJTbjNjSXMwNzNoY0QKREFxZ0U4L3NtdmNIdng5cDJ3TitBOG89Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNtRENDQWo2Z0F3SUJBZ0lWQU5Eb3F0cDExL2t1U1JlWVBIc1VaZERWOGxsTk1Bb0dDQ3FHU000OUJBTUMKTUdneEdqQVlCZ05WQkFNTUVVbHVkR1ZzSUZOSFdDQlNiMjkwSUVOQk1Sb3dHQVlEVlFRS0RCRkpiblJsYkNCRApiM0p3YjNKaGRHbHZiakVVTUJJR0ExVUVCd3dMVTJGdWRHRWdRMnhoY21FeEN6QUpCZ05WQkFnTUFrTkJNUXN3CkNRWURWUVFHRXdKVlV6QWVGdzB4T0RBMU1qRXhNRFV3TVRCYUZ3MHpNekExTWpFeE1EVXdNVEJhTUhFeEl6QWgKQmdOVkJBTU1Ha2x1ZEdWc0lGTkhXQ0JRUTBzZ1VISnZZMlZ6YzI5eUlFTkJNUm93R0FZRFZRUUtEQkZKYm5SbApiQ0JEYjNKd2IzSmhkR2x2YmpFVU1CSUdBMVVFQnd3TFUyRnVkR0VnUTJ4aGNtRXhDekFKQmdOVkJBZ01Ba05CCk1Rc3dDUVlEVlFRR0V3SlZVekJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCTDlxK05NcDJJT2cKdGRsMWJrL3VXWjUrVEdRbThhQ2k4ejc4ZnMrZktDUTNkK3VEelhuVlRBVDJaaERDaWZ5SXVKd3ZOM3dOQnA5aQpIQlNTTUpNSnJCT2pnYnN3Z2Jnd0h3WURWUjBqQkJnd0ZvQVVJbVVNMWxxZE5JbnpnN1NWVXI5UUd6a25CcXd3ClVnWURWUjBmQkVzd1NUQkhvRVdnUTRaQmFIUjBjSE02THk5alpYSjBhV1pwWTJGMFpYTXVkSEoxYzNSbFpITmwKY25acFkyVnpMbWx1ZEdWc0xtTnZiUzlKYm5SbGJGTkhXRkp2YjNSRFFTNWtaWEl3SFFZRFZSME9CQllFRk5EbwpxdHAxMS9rdVNSZVlQSHNVWmREVjhsbE5NQTRHQTFVZER3RUIvd1FFQXdJQkJqQVNCZ05WSFJNQkFmOEVDREFHCkFRSC9BZ0VBTUFvR0NDcUdTTTQ5QkFNQ0EwZ0FNRVVDSVFDSmdUYnRWcU95WjFtM2pxaUFYTTZRWWE2cjVzV1MKNHkvRzd5OHVJSkd4ZHdJZ1JxUHZCU0t6elFhZ0JMUXE1czVBNzBwZG9pYVJKOHovMHVEejROZ1Y5MWs9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNqekNDQWpTZ0F3SUJBZ0lVSW1VTTFscWROSW56ZzdTVlVyOVFHemtuQnF3d0NnWUlLb1pJemowRUF3SXcKYURFYU1CZ0dBMVVFQXd3UlNXNTBaV3dnVTBkWUlGSnZiM1FnUTBFeEdqQVlCZ05WQkFvTUVVbHVkR1ZzSUVOdgpjbkJ2Y21GMGFXOXVNUlF3RWdZRFZRUUhEQXRUWVc1MFlTQkRiR0Z5WVRFTE1Ba0dBMVVFQ0F3Q1EwRXhDekFKCkJnTlZCQVlUQWxWVE1CNFhEVEU0TURVeU1URXdORFV4TUZvWERUUTVNVEl6TVRJek5UazFPVm93YURFYU1CZ0cKQTFVRUF3d1JTVzUwWld3Z1UwZFlJRkp2YjNRZ1EwRXhHakFZQmdOVkJBb01FVWx1ZEdWc0lFTnZjbkJ2Y21GMAphVzl1TVJRd0VnWURWUVFIREF0VFlXNTBZU0JEYkdGeVlURUxNQWtHQTFVRUNBd0NRMEV4Q3pBSkJnTlZCQVlUCkFsVlRNRmt3RXdZSEtvWkl6ajBDQVFZSUtvWkl6ajBEQVFjRFFnQUVDNm5Fd01ESVlaT2ovaVBXc0N6YUVLaTcKMU9pT1NMUkZoV0dqYm5CVkpmVm5rWTR1M0lqa0RZWUwwTXhPNG1xc3lZamxCYWxUVll4RlAyc0pCSzV6bEtPQgp1ekNCdURBZkJnTlZIU01FR0RBV2dCUWlaUXpXV3AwMGlmT0R0SlZTdjFBYk9TY0dyREJTQmdOVkhSOEVTekJKCk1FZWdSYUJEaGtGb2RIUndjem92TDJObGNuUnBabWxqWVhSbGN5NTBjblZ6ZEdWa2MyVnlkbWxqWlhNdWFXNTAKWld3dVkyOXRMMGx1ZEdWc1UwZFlVbTl2ZEVOQkxtUmxjakFkQmdOVkhRNEVGZ1FVSW1VTTFscWROSW56ZzdTVgpVcjlRR3prbkJxd3dEZ1lEVlIwUEFRSC9CQVFEQWdFR01CSUdBMVVkRXdFQi93UUlNQVlCQWY4Q0FRRXdDZ1lJCktvWkl6ajBFQXdJRFNRQXdSZ0loQU9XLzVRa1IrUzlDaVNEY05vb3dMdVBSTHNXR2YvWWk3R1NYOTRCZ3dUd2cKQWlFQTRKMGxySG9NcytYbzVvL3NYNk85UVd4SFJBdlpVR09kUlE3Y3ZxUlhhcUk9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KAA==",
  "endorsements": ""
})";

std::string icelake_quote = R"({
  "source": "sgx",
  "evidence": "AwACAAAAAAAIAA0Ak5pyM/ecTKmUCg2zlX8GBywpOQ3mxF2XdC+3LWhQiwkAAAAACAgODf//AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwAAAAAAAAAHAAAAAAAAAN1yOYDXU051MTvduxQ0HWOgNXuR2eE2mY/doOIgtmTIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAG3Oihbr8X2K6L7RidRQHMdcVYX5TcMVztOSbthx6NWgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADrJdgfT2OVVBjgFfTo5mAXKqsKIHwd6dJv2Eh35eavyAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAxhAAAJ0zD6GXWZ4uIx+MOw2QWPm9tpFw7lFp6dVn4O5DlEfBwugvXEG1Y3Bndkzyo9XXYpr5HXLdEeSsQwTEmMgVdYNwI5DNkGyZLixfzDkeurF3juwGxhN4F86DaR76+aBhOoVEnvwXbYM/JVmpEpLZCjKzTm2he6J87nU+TIJmcsctCAgODf//AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFQAAAAAAAADnAAAAAAAAAIzlhoW+NuRhh8Izx+me1v5127M/dWetohewd+zYz4L5AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACMT1d115ZQPpYTf3fGioKaAFasje1wFAsIGwlEkMV7/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB/Z2jWySzHGBl9TOc39+aCOmGXfNesXR17QKT8/k+x9gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8gS3xpre3Bqm9kLCz9xAWh9Vbgx9H9jCX0TTiDrvzA095Chr7rqzO56wfQ27Dyd45xHyB6OxHNgGTduNPdUUpiAAAAECAwQFBgcICQoLDA0ODxAREhMUFRYXGBkaGxwdHh8FAF4OAAAtLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJRThUQ0NCSmlnQXdJQkFnSVVZWGZFL2ZDRDJMR3hWai9MOU5JMWZUZFN4dmt3Q2dZSUtvWkl6ajBFQXdJdwpjREVpTUNBR0ExVUVBd3daU1c1MFpXd2dVMGRZSUZCRFN5QlFiR0YwWm05eWJTQkRRVEVhTUJnR0ExVUVDZ3dSClNXNTBaV3dnUTI5eWNHOXlZWFJwYjI0eEZEQVNCZ05WQkFjTUMxTmhiblJoSUVOc1lYSmhNUXN3Q1FZRFZRUUkKREFKRFFURUxNQWtHQTFVRUJoTUNWVk13SGhjTk1qSXdOVEl6TURBMU56STNXaGNOTWprd05USXpNREExTnpJMwpXakJ3TVNJd0lBWURWUVFEREJsSmJuUmxiQ0JUUjFnZ1VFTkxJRU5sY25ScFptbGpZWFJsTVJvd0dBWURWUVFLCkRCRkpiblJsYkNCRGIzSndiM0poZEdsdmJqRVVNQklHQTFVRUJ3d0xVMkZ1ZEdFZ1EyeGhjbUV4Q3pBSkJnTlYKQkFnTUFrTkJNUXN3Q1FZRFZRUUdFd0pWVXpCWk1CTUdCeXFHU000OUFnRUdDQ3FHU000OUF3RUhBMElBQk4vcApodEtkMndhYXRXWWtNS0YwcWhPSXBxTGRTajJYc3REQS9aZSs0cFN2Y21BMkptcG5SeGo2SC9RTkdEaUdlaG80CjVxUVEyMmZWb0VyNTVzTTFaak9qZ2dNT01JSURDakFmQmdOVkhTTUVHREFXZ0JTVmIxM052UnZoNlVCSnlkVDAKTTg0QlZ3dmVWREJyQmdOVkhSOEVaREJpTUdDZ1hxQmNobHBvZEhSd2N6b3ZMMkZ3YVM1MGNuVnpkR1ZrYzJWeQpkbWxqWlhNdWFXNTBaV3d1WTI5dEwzTm5lQzlqWlhKMGFXWnBZMkYwYVc5dUwzWXpMM0JqYTJOeWJEOWpZVDF3CmJHRjBabTl5YlNabGJtTnZaR2x1Wnoxa1pYSXdIUVlEVlIwT0JCWUVGQm5sbGk4bFlFc1h3TzJDMVVVUzBoRW0KT1lxYk1BNEdBMVVkRHdFQi93UUVBd0lHd0RBTUJnTlZIUk1CQWY4RUFqQUFNSUlDT3dZSktvWklodmhOQVEwQgpCSUlDTERDQ0FpZ3dIZ1lLS29aSWh2aE5BUTBCQVFRUXpKR1c5MGxzdlBTZldteDV4Q0NnUURDQ0FXVUdDaXFHClNJYjRUUUVOQVFJd2dnRlZNQkFHQ3lxR1NJYjRUUUVOQVFJQkFnRUVNQkFHQ3lxR1NJYjRUUUVOQVFJQ0FnRUUKTUJBR0N5cUdTSWI0VFFFTkFRSURBZ0VETUJBR0N5cUdTSWI0VFFFTkFRSUVBZ0VETUJFR0N5cUdTSWI0VFFFTgpBUUlGQWdJQS96QVJCZ3NxaGtpRytFMEJEUUVDQmdJQ0FQOHdFQVlMS29aSWh2aE5BUTBCQWdjQ0FRQXdFQVlMCktvWklodmhOQVEwQkFnZ0NBUUF3RUFZTEtvWklodmhOQVEwQkFna0NBUUF3RUFZTEtvWklodmhOQVEwQkFnb0MKQVFBd0VBWUxLb1pJaHZoTkFRMEJBZ3NDQVFBd0VBWUxLb1pJaHZoTkFRMEJBZ3dDQVFBd0VBWUxLb1pJaHZoTgpBUTBCQWcwQ0FRQXdFQVlMS29aSWh2aE5BUTBCQWc0Q0FRQXdFQVlMS29aSWh2aE5BUTBCQWc4Q0FRQXdFQVlMCktvWklodmhOQVEwQkFoQUNBUUF3RUFZTEtvWklodmhOQVEwQkFoRUNBUXN3SHdZTEtvWklodmhOQVEwQkFoSUUKRUFRRUF3UC8vd0FBQUFBQUFBQUFBQUF3RUFZS0tvWklodmhOQVEwQkF3UUNBQUF3RkFZS0tvWklodmhOQVEwQgpCQVFHQUdCcUFBQUFNQThHQ2lxR1NJYjRUUUVOQVFVS0FRRXdIZ1lLS29aSWh2aE5BUTBCQmdRUXA1RURURWtrCjRrbVVEVlZZc3laQkpEQkVCZ29xaGtpRytFMEJEUUVITURZd0VBWUxLb1pJaHZoTkFRMEJCd0VCQWY4d0VBWUwKS29aSWh2aE5BUTBCQndJQkFRQXdFQVlMS29aSWh2aE5BUTBCQndNQkFmOHdDZ1lJS29aSXpqMEVBd0lEUndBdwpSQUlnWGxwVWRBYjRGQkpYWEFPeGpSTFZYd21mZXp2SVpQYithL2RSQ3NvS2dOWUNJQWY1TzJjZHA4T1VLYTV4CmdSQUo0eTN4TUg4ZTBJMVQrYjdXV3FML0dkYU4KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJQ2xqQ0NBajJnQXdJQkFnSVZBSlZ2WGMyOUcrSHBRRW5KMVBRenpnRlhDOTVVTUFvR0NDcUdTTTQ5QkFNQwpNR2d4R2pBWUJnTlZCQU1NRVVsdWRHVnNJRk5IV0NCU2IyOTBJRU5CTVJvd0dBWURWUVFLREJGSmJuUmxiQ0JECmIzSndiM0poZEdsdmJqRVVNQklHQTFVRUJ3d0xVMkZ1ZEdFZ1EyeGhjbUV4Q3pBSkJnTlZCQWdNQWtOQk1Rc3cKQ1FZRFZRUUdFd0pWVXpBZUZ3MHhPREExTWpFeE1EVXdNVEJhRncwek16QTFNakV4TURVd01UQmFNSEF4SWpBZwpCZ05WQkFNTUdVbHVkR1ZzSUZOSFdDQlFRMHNnVUd4aGRHWnZjbTBnUTBFeEdqQVlCZ05WQkFvTUVVbHVkR1ZzCklFTnZjbkJ2Y21GMGFXOXVNUlF3RWdZRFZRUUhEQXRUWVc1MFlTQkRiR0Z5WVRFTE1Ba0dBMVVFQ0F3Q1EwRXgKQ3pBSkJnTlZCQVlUQWxWVE1Ga3dFd1lIS29aSXpqMENBUVlJS29aSXpqMERBUWNEUWdBRU5TQi83dDIxbFhTTwoyQ3V6cHh3NzRlSkI3MkV5REdnVzVyWEN0eDJ0VlRMcTZoS2s2eitVaVJaQ25xUjdwc092Z3FGZVN4bG1UbEpsCmVUbWkyV1l6M3FPQnV6Q0J1REFmQmdOVkhTTUVHREFXZ0JRaVpReldXcDAwaWZPRHRKVlN2MUFiT1NjR3JEQlMKQmdOVkhSOEVTekJKTUVlZ1JhQkRoa0ZvZEhSd2N6b3ZMMk5sY25ScFptbGpZWFJsY3k1MGNuVnpkR1ZrYzJWeQpkbWxqWlhNdWFXNTBaV3d1WTI5dEwwbHVkR1ZzVTBkWVVtOXZkRU5CTG1SbGNqQWRCZ05WSFE0RUZnUVVsVzlkCnpiMGI0ZWxBU2NuVTlEUE9BVmNMM2xRd0RnWURWUjBQQVFIL0JBUURBZ0VHTUJJR0ExVWRFd0VCL3dRSU1BWUIKQWY4Q0FRQXdDZ1lJS29aSXpqMEVBd0lEUndBd1JBSWdYc1ZraTB3K2k2VllHVzNVRi8yMnVhWGUwWUpEajFVZQpuQStUakQxYWk1Y0NJQ1liMVNBbUQ1eGtmVFZwdm80VW95aVNZeHJEV0xtVVI0Q0k5Tkt5ZlBOKwotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlDanpDQ0FqU2dBd0lCQWdJVUltVU0xbHFkTkluemc3U1ZVcjlRR3prbkJxd3dDZ1lJS29aSXpqMEVBd0l3CmFERWFNQmdHQTFVRUF3d1JTVzUwWld3Z1UwZFlJRkp2YjNRZ1EwRXhHakFZQmdOVkJBb01FVWx1ZEdWc0lFTnYKY25CdmNtRjBhVzl1TVJRd0VnWURWUVFIREF0VFlXNTBZU0JEYkdGeVlURUxNQWtHQTFVRUNBd0NRMEV4Q3pBSgpCZ05WQkFZVEFsVlRNQjRYRFRFNE1EVXlNVEV3TkRVeE1Gb1hEVFE1TVRJek1USXpOVGsxT1Zvd2FERWFNQmdHCkExVUVBd3dSU1c1MFpXd2dVMGRZSUZKdmIzUWdRMEV4R2pBWUJnTlZCQW9NRVVsdWRHVnNJRU52Y25CdmNtRjAKYVc5dU1SUXdFZ1lEVlFRSERBdFRZVzUwWVNCRGJHRnlZVEVMTUFrR0ExVUVDQXdDUTBFeEN6QUpCZ05WQkFZVApBbFZUTUZrd0V3WUhLb1pJemowQ0FRWUlLb1pJemowREFRY0RRZ0FFQzZuRXdNRElZWk9qL2lQV3NDemFFS2k3CjFPaU9TTFJGaFdHamJuQlZKZlZua1k0dTNJamtEWVlMME14TzRtcXN5WWpsQmFsVFZZeEZQMnNKQks1emxLT0IKdXpDQnVEQWZCZ05WSFNNRUdEQVdnQlFpWlF6V1dwMDBpZk9EdEpWU3YxQWJPU2NHckRCU0JnTlZIUjhFU3pCSgpNRWVnUmFCRGhrRm9kSFJ3Y3pvdkwyTmxjblJwWm1sallYUmxjeTUwY25WemRHVmtjMlZ5ZG1salpYTXVhVzUwClpXd3VZMjl0TDBsdWRHVnNVMGRZVW05dmRFTkJMbVJsY2pBZEJnTlZIUTRFRmdRVUltVU0xbHFkTkluemc3U1YKVXI5UUd6a25CcXd3RGdZRFZSMFBBUUgvQkFRREFnRUdNQklHQTFVZEV3RUIvd1FJTUFZQkFmOENBUUV3Q2dZSQpLb1pJemowRUF3SURTUUF3UmdJaEFPVy81UWtSK1M5Q2lTRGNOb293THVQUkxzV0dmL1lpN0dTWDk0Qmd3VHdnCkFpRUE0SjBsckhvTXMrWG81by9zWDZPOVFXeEhSQXZaVUdPZFJRN2N2cVJYYXFJPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCgA=",
  "endorsements": ""
})";

std::string oe_no_custom_claims = R"({
  "source": "openenclave",
  "evidence": "AwACAAAAAAAIAA0Ak5pyM/ecTKmUCg2zlX8GByV7poCkzztBEA1BOoP0LTUAAAAAExMCB/+ABgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwAAAAAAAAAHAAAAAAAAAMpBeMnCYXvHKO6kKlu0RsKY9CXDSgzFeobneBoNFuJFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADGQEG1L7ZN92BOjyRCkw9sqB4SV/rwrAjYDEGzatE2PQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADjsMRCmPwcFJr79MiZb7kkJ65B5GSbk0yklZkbeFK4VQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARBAAAGZh6jvqrqZ76+NXkbf1CTItn48jQOEVxiXi4bTuOghq4b4NmjBl2/QvYEN35OWMH7+5bjslNgsto64iwTzOd5FBWxRiC4Pxuqak78F0MDYo2IQy0PPTta8rsRgAZV3bfZj+xSqjHCfGZIhcoy7C1WCCXBlyL/EkDPTjDQqfJc4cExMCB/+ABgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFQAAAAAAAAAHAAAAAAAAAIzlhoW+NuRhh8Izx+me1v5127M/dWetohewd+zYz4L5AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACMT1d115ZQPpYTf3fGioKaAFasje1wFAsIGwlEkMV7/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADaeHiXlftEWtCNsuUhLnySVEgAQYfKtaGgDAAVzDMzdAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJIQIMgdjkmytzLO4/nkEz0h9mNS22umGA0Lag+tTbDOMNNqFHjcrJIhbn3WeYMfHdzJJwDim2MzDzrHc6IhdxCAAAAECAwQFBgcICQoLDA0ODxAREhMUFRYXGBkaGxwdHh8FANwNAAAtLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJRWpUQ0NCRFNnQXdJQkFnSVZBTDEzdExSZURGVnFSZFc2L2s3ZG1HY0pCSXduTUFvR0NDcUdTTTQ5QkFNQwpNSEV4SXpBaEJnTlZCQU1NR2tsdWRHVnNJRk5IV0NCUVEwc2dVSEp2WTJWemMyOXlJRU5CTVJvd0dBWURWUVFLCkRCRkpiblJsYkNCRGIzSndiM0poZEdsdmJqRVVNQklHQTFVRUJ3d0xVMkZ1ZEdFZ1EyeGhjbUV4Q3pBSkJnTlYKQkFnTUFrTkJNUXN3Q1FZRFZRUUdFd0pWVXpBZUZ3MHlNakEzTVRjd01ETTVNak5hRncweU9UQTNNVGN3TURNNQpNak5hTUhBeElqQWdCZ05WQkFNTUdVbHVkR1ZzSUZOSFdDQlFRMHNnUTJWeWRHbG1hV05oZEdVeEdqQVlCZ05WCkJBb01FVWx1ZEdWc0lFTnZjbkJ2Y21GMGFXOXVNUlF3RWdZRFZRUUhEQXRUWVc1MFlTQkRiR0Z5WVRFTE1Ba0cKQTFVRUNBd0NRMEV4Q3pBSkJnTlZCQVlUQWxWVE1Ga3dFd1lIS29aSXpqMENBUVlJS29aSXpqMERBUWNEUWdBRQoxdGc4aDBhTDRDTW81cTZUV3JNa2IrWi8wWEs2ZU9Nc3NLYTEzbXZwWTZMUUN6ZnFzRDdvTUh5ODlHNVhmK2lrCkxxMW9mdlc4czdhV0RUSithMGExdEtPQ0FxZ3dnZ0trTUI4R0ExVWRJd1FZTUJhQUZORG9xdHAxMS9rdVNSZVkKUEhzVVpkRFY4bGxOTUd3R0ExVWRId1JsTUdNd1lhQmZvRjJHVzJoMGRIQnpPaTh2WVhCcExuUnlkWE4wWldSegpaWEoyYVdObGN5NXBiblJsYkM1amIyMHZjMmQ0TDJObGNuUnBabWxqWVhScGIyNHZkak12Y0dOclkzSnNQMk5oClBYQnliMk5sYzNOdmNpWmxibU52WkdsdVp6MWtaWEl3SFFZRFZSME9CQllFRkI1VmxaTitSaEdUVS9KMUpjeDcKbE5Sc0xpVXRNQTRHQTFVZER3RUIvd1FFQXdJR3dEQU1CZ05WSFJNQkFmOEVBakFBTUlJQjFBWUpLb1pJaHZoTgpBUTBCQklJQnhUQ0NBY0V3SGdZS0tvWklodmhOQVEwQkFRUVE3STA4cS9pZ3laYmh6S3FiblpTSDNqQ0NBV1FHCkNpcUdTSWI0VFFFTkFRSXdnZ0ZVTUJBR0N5cUdTSWI0VFFFTkFRSUJBZ0VSTUJBR0N5cUdTSWI0VFFFTkFRSUMKQWdFUk1CQUdDeXFHU0liNFRRRU5BUUlEQWdFQ01CQUdDeXFHU0liNFRRRU5BUUlFQWdFRU1CQUdDeXFHU0liNApUUUVOQVFJRkFnRUJNQkVHQ3lxR1NJYjRUUUVOQVFJR0FnSUFnREFRQmdzcWhraUcrRTBCRFFFQ0J3SUJCakFRCkJnc3Foa2lHK0UwQkRRRUNDQUlCQURBUUJnc3Foa2lHK0UwQkRRRUNDUUlCQURBUUJnc3Foa2lHK0UwQkRRRUMKQ2dJQkFEQVFCZ3NxaGtpRytFMEJEUUVDQ3dJQkFEQVFCZ3NxaGtpRytFMEJEUUVDREFJQkFEQVFCZ3NxaGtpRworRTBCRFFFQ0RRSUJBREFRQmdzcWhraUcrRTBCRFFFQ0RnSUJBREFRQmdzcWhraUcrRTBCRFFFQ0R3SUJBREFRCkJnc3Foa2lHK0UwQkRRRUNFQUlCQURBUUJnc3Foa2lHK0UwQkRRRUNFUUlCQ3pBZkJnc3Foa2lHK0UwQkRRRUMKRWdRUUVSRUNCQUdBQmdBQUFBQUFBQUFBQURBUUJnb3Foa2lHK0UwQkRRRURCQUlBQURBVUJnb3Foa2lHK0UwQgpEUUVFQkFZQWtHN1ZBQUF3RHdZS0tvWklodmhOQVEwQkJRb0JBREFLQmdncWhrak9QUVFEQWdOSEFEQkVBaUFVCkp5U1A3YkhpZjM2eEhEN2dmTTFHSEFGL1AvMy80azIzQ2k3OFAxTFQwZ0lnY3BqemNwbEJTbjNjSXMwNzNoY0QKREFxZ0U4L3NtdmNIdng5cDJ3TitBOG89Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNtRENDQWo2Z0F3SUJBZ0lWQU5Eb3F0cDExL2t1U1JlWVBIc1VaZERWOGxsTk1Bb0dDQ3FHU000OUJBTUMKTUdneEdqQVlCZ05WQkFNTUVVbHVkR1ZzSUZOSFdDQlNiMjkwSUVOQk1Sb3dHQVlEVlFRS0RCRkpiblJsYkNCRApiM0p3YjNKaGRHbHZiakVVTUJJR0ExVUVCd3dMVTJGdWRHRWdRMnhoY21FeEN6QUpCZ05WQkFnTUFrTkJNUXN3CkNRWURWUVFHRXdKVlV6QWVGdzB4T0RBMU1qRXhNRFV3TVRCYUZ3MHpNekExTWpFeE1EVXdNVEJhTUhFeEl6QWgKQmdOVkJBTU1Ha2x1ZEdWc0lGTkhXQ0JRUTBzZ1VISnZZMlZ6YzI5eUlFTkJNUm93R0FZRFZRUUtEQkZKYm5SbApiQ0JEYjNKd2IzSmhkR2x2YmpFVU1CSUdBMVVFQnd3TFUyRnVkR0VnUTJ4aGNtRXhDekFKQmdOVkJBZ01Ba05CCk1Rc3dDUVlEVlFRR0V3SlZVekJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCTDlxK05NcDJJT2cKdGRsMWJrL3VXWjUrVEdRbThhQ2k4ejc4ZnMrZktDUTNkK3VEelhuVlRBVDJaaERDaWZ5SXVKd3ZOM3dOQnA5aQpIQlNTTUpNSnJCT2pnYnN3Z2Jnd0h3WURWUjBqQkJnd0ZvQVVJbVVNMWxxZE5JbnpnN1NWVXI5UUd6a25CcXd3ClVnWURWUjBmQkVzd1NUQkhvRVdnUTRaQmFIUjBjSE02THk5alpYSjBhV1pwWTJGMFpYTXVkSEoxYzNSbFpITmwKY25acFkyVnpMbWx1ZEdWc0xtTnZiUzlKYm5SbGJGTkhXRkp2YjNSRFFTNWtaWEl3SFFZRFZSME9CQllFRk5EbwpxdHAxMS9rdVNSZVlQSHNVWmREVjhsbE5NQTRHQTFVZER3RUIvd1FFQXdJQkJqQVNCZ05WSFJNQkFmOEVDREFHCkFRSC9BZ0VBTUFvR0NDcUdTTTQ5QkFNQ0EwZ0FNRVVDSVFDSmdUYnRWcU95WjFtM2pxaUFYTTZRWWE2cjVzV1MKNHkvRzd5OHVJSkd4ZHdJZ1JxUHZCU0t6elFhZ0JMUXE1czVBNzBwZG9pYVJKOHovMHVEejROZ1Y5MWs9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNqekNDQWpTZ0F3SUJBZ0lVSW1VTTFscWROSW56ZzdTVlVyOVFHemtuQnF3d0NnWUlLb1pJemowRUF3SXcKYURFYU1CZ0dBMVVFQXd3UlNXNTBaV3dnVTBkWUlGSnZiM1FnUTBFeEdqQVlCZ05WQkFvTUVVbHVkR1ZzSUVOdgpjbkJ2Y21GMGFXOXVNUlF3RWdZRFZRUUhEQXRUWVc1MFlTQkRiR0Z5WVRFTE1Ba0dBMVVFQ0F3Q1EwRXhDekFKCkJnTlZCQVlUQWxWVE1CNFhEVEU0TURVeU1URXdORFV4TUZvWERUUTVNVEl6TVRJek5UazFPVm93YURFYU1CZ0cKQTFVRUF3d1JTVzUwWld3Z1UwZFlJRkp2YjNRZ1EwRXhHakFZQmdOVkJBb01FVWx1ZEdWc0lFTnZjbkJ2Y21GMAphVzl1TVJRd0VnWURWUVFIREF0VFlXNTBZU0JEYkdGeVlURUxNQWtHQTFVRUNBd0NRMEV4Q3pBSkJnTlZCQVlUCkFsVlRNRmt3RXdZSEtvWkl6ajBDQVFZSUtvWkl6ajBEQVFjRFFnQUVDNm5Fd01ESVlaT2ovaVBXc0N6YUVLaTcKMU9pT1NMUkZoV0dqYm5CVkpmVm5rWTR1M0lqa0RZWUwwTXhPNG1xc3lZamxCYWxUVll4RlAyc0pCSzV6bEtPQgp1ekNCdURBZkJnTlZIU01FR0RBV2dCUWlaUXpXV3AwMGlmT0R0SlZTdjFBYk9TY0dyREJTQmdOVkhSOEVTekJKCk1FZWdSYUJEaGtGb2RIUndjem92TDJObGNuUnBabWxqWVhSbGN5NTBjblZ6ZEdWa2MyVnlkbWxqWlhNdWFXNTAKWld3dVkyOXRMMGx1ZEdWc1UwZFlVbTl2ZEVOQkxtUmxjakFkQmdOVkhRNEVGZ1FVSW1VTTFscWROSW56ZzdTVgpVcjlRR3prbkJxd3dEZ1lEVlIwUEFRSC9CQVFEQWdFR01CSUdBMVVkRXdFQi93UUlNQVlCQWY4Q0FRRXdDZ1lJCktvWkl6ajBFQXdJRFNRQXdSZ0loQU9XLzVRa1IrUzlDaVNEY05vb3dMdVBSTHNXR2YvWWk3R1NYOTRCZ3dUd2cKQWlFQTRKMGxySG9NcytYbzVvL3NYNk85UVd4SFJBdlpVR09kUlE3Y3ZxUlhhcUk9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KAA==",
  "endorsements": ""
})";

std::string sgx_sdk_qe_quote3 = R"({
  "source": "sgx",
  "evidence": "AwACAAAAAAAIAA0Ak5pyM/ecTKmUCg2zlX8GByV7poCkzztBEA1BOoP0LTUAAAAAExMCB/+ABgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwAAAAAAAAAHAAAAAAAAAAEw5BnpsDwjTAqUD79iY7VCgoxUOFNxI/8sxpRCgq3iAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACOuvEuE5EoF5IMvbr1+5OzW/NdVG1qgfwlYmnh8KTD+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGQAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARBAAAF2Igwj1GDn2z+A9bho7jX1TDF3irhvj0pppj8MRndmowEBaxDJtzo5UlfgRN8PycDyO+dmwmZQgbUjfwn15/DFBWxRiC4Pxuqak78F0MDYo2IQy0PPTta8rsRgAZV3bfZj+xSqjHCfGZIhcoy7C1WCCXBlyL/EkDPTjDQqfJc4cExMCB/+ABgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFQAAAAAAAAAHAAAAAAAAAIzlhoW+NuRhh8Izx+me1v5127M/dWetohewd+zYz4L5AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACMT1d115ZQPpYTf3fGioKaAFasje1wFAsIGwlEkMV7/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADaeHiXlftEWtCNsuUhLnySVEgAQYfKtaGgDAAVzDMzdAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJIQIMgdjkmytzLO4/nkEz0h9mNS22umGA0Lag+tTbDOMNNqFHjcrJIhbn3WeYMfHdzJJwDim2MzDzrHc6IhdxCAAAAECAwQFBgcICQoLDA0ODxAREhMUFRYXGBkaGxwdHh8FANwNAAAtLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJRWpUQ0NCRFNnQXdJQkFnSVZBTDEzdExSZURGVnFSZFc2L2s3ZG1HY0pCSXduTUFvR0NDcUdTTTQ5QkFNQwpNSEV4SXpBaEJnTlZCQU1NR2tsdWRHVnNJRk5IV0NCUVEwc2dVSEp2WTJWemMyOXlJRU5CTVJvd0dBWURWUVFLCkRCRkpiblJsYkNCRGIzSndiM0poZEdsdmJqRVVNQklHQTFVRUJ3d0xVMkZ1ZEdFZ1EyeGhjbUV4Q3pBSkJnTlYKQkFnTUFrTkJNUXN3Q1FZRFZRUUdFd0pWVXpBZUZ3MHlNakEzTVRjd01ETTVNak5hRncweU9UQTNNVGN3TURNNQpNak5hTUhBeElqQWdCZ05WQkFNTUdVbHVkR1ZzSUZOSFdDQlFRMHNnUTJWeWRHbG1hV05oZEdVeEdqQVlCZ05WCkJBb01FVWx1ZEdWc0lFTnZjbkJ2Y21GMGFXOXVNUlF3RWdZRFZRUUhEQXRUWVc1MFlTQkRiR0Z5WVRFTE1Ba0cKQTFVRUNBd0NRMEV4Q3pBSkJnTlZCQVlUQWxWVE1Ga3dFd1lIS29aSXpqMENBUVlJS29aSXpqMERBUWNEUWdBRQoxdGc4aDBhTDRDTW81cTZUV3JNa2IrWi8wWEs2ZU9Nc3NLYTEzbXZwWTZMUUN6ZnFzRDdvTUh5ODlHNVhmK2lrCkxxMW9mdlc4czdhV0RUSithMGExdEtPQ0FxZ3dnZ0trTUI4R0ExVWRJd1FZTUJhQUZORG9xdHAxMS9rdVNSZVkKUEhzVVpkRFY4bGxOTUd3R0ExVWRId1JsTUdNd1lhQmZvRjJHVzJoMGRIQnpPaTh2WVhCcExuUnlkWE4wWldSegpaWEoyYVdObGN5NXBiblJsYkM1amIyMHZjMmQ0TDJObGNuUnBabWxqWVhScGIyNHZkak12Y0dOclkzSnNQMk5oClBYQnliMk5sYzNOdmNpWmxibU52WkdsdVp6MWtaWEl3SFFZRFZSME9CQllFRkI1VmxaTitSaEdUVS9KMUpjeDcKbE5Sc0xpVXRNQTRHQTFVZER3RUIvd1FFQXdJR3dEQU1CZ05WSFJNQkFmOEVBakFBTUlJQjFBWUpLb1pJaHZoTgpBUTBCQklJQnhUQ0NBY0V3SGdZS0tvWklodmhOQVEwQkFRUVE3STA4cS9pZ3laYmh6S3FiblpTSDNqQ0NBV1FHCkNpcUdTSWI0VFFFTkFRSXdnZ0ZVTUJBR0N5cUdTSWI0VFFFTkFRSUJBZ0VSTUJBR0N5cUdTSWI0VFFFTkFRSUMKQWdFUk1CQUdDeXFHU0liNFRRRU5BUUlEQWdFQ01CQUdDeXFHU0liNFRRRU5BUUlFQWdFRU1CQUdDeXFHU0liNApUUUVOQVFJRkFnRUJNQkVHQ3lxR1NJYjRUUUVOQVFJR0FnSUFnREFRQmdzcWhraUcrRTBCRFFFQ0J3SUJCakFRCkJnc3Foa2lHK0UwQkRRRUNDQUlCQURBUUJnc3Foa2lHK0UwQkRRRUNDUUlCQURBUUJnc3Foa2lHK0UwQkRRRUMKQ2dJQkFEQVFCZ3NxaGtpRytFMEJEUUVDQ3dJQkFEQVFCZ3NxaGtpRytFMEJEUUVDREFJQkFEQVFCZ3NxaGtpRworRTBCRFFFQ0RRSUJBREFRQmdzcWhraUcrRTBCRFFFQ0RnSUJBREFRQmdzcWhraUcrRTBCRFFFQ0R3SUJBREFRCkJnc3Foa2lHK0UwQkRRRUNFQUlCQURBUUJnc3Foa2lHK0UwQkRRRUNFUUlCQ3pBZkJnc3Foa2lHK0UwQkRRRUMKRWdRUUVSRUNCQUdBQmdBQUFBQUFBQUFBQURBUUJnb3Foa2lHK0UwQkRRRURCQUlBQURBVUJnb3Foa2lHK0UwQgpEUUVFQkFZQWtHN1ZBQUF3RHdZS0tvWklodmhOQVEwQkJRb0JBREFLQmdncWhrak9QUVFEQWdOSEFEQkVBaUFVCkp5U1A3YkhpZjM2eEhEN2dmTTFHSEFGL1AvMy80azIzQ2k3OFAxTFQwZ0lnY3BqemNwbEJTbjNjSXMwNzNoY0QKREFxZ0U4L3NtdmNIdng5cDJ3TitBOG89Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNtRENDQWo2Z0F3SUJBZ0lWQU5Eb3F0cDExL2t1U1JlWVBIc1VaZERWOGxsTk1Bb0dDQ3FHU000OUJBTUMKTUdneEdqQVlCZ05WQkFNTUVVbHVkR1ZzSUZOSFdDQlNiMjkwSUVOQk1Sb3dHQVlEVlFRS0RCRkpiblJsYkNCRApiM0p3YjNKaGRHbHZiakVVTUJJR0ExVUVCd3dMVTJGdWRHRWdRMnhoY21FeEN6QUpCZ05WQkFnTUFrTkJNUXN3CkNRWURWUVFHRXdKVlV6QWVGdzB4T0RBMU1qRXhNRFV3TVRCYUZ3MHpNekExTWpFeE1EVXdNVEJhTUhFeEl6QWgKQmdOVkJBTU1Ha2x1ZEdWc0lGTkhXQ0JRUTBzZ1VISnZZMlZ6YzI5eUlFTkJNUm93R0FZRFZRUUtEQkZKYm5SbApiQ0JEYjNKd2IzSmhkR2x2YmpFVU1CSUdBMVVFQnd3TFUyRnVkR0VnUTJ4aGNtRXhDekFKQmdOVkJBZ01Ba05CCk1Rc3dDUVlEVlFRR0V3SlZVekJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCTDlxK05NcDJJT2cKdGRsMWJrL3VXWjUrVEdRbThhQ2k4ejc4ZnMrZktDUTNkK3VEelhuVlRBVDJaaERDaWZ5SXVKd3ZOM3dOQnA5aQpIQlNTTUpNSnJCT2pnYnN3Z2Jnd0h3WURWUjBqQkJnd0ZvQVVJbVVNMWxxZE5JbnpnN1NWVXI5UUd6a25CcXd3ClVnWURWUjBmQkVzd1NUQkhvRVdnUTRaQmFIUjBjSE02THk5alpYSjBhV1pwWTJGMFpYTXVkSEoxYzNSbFpITmwKY25acFkyVnpMbWx1ZEdWc0xtTnZiUzlKYm5SbGJGTkhXRkp2YjNSRFFTNWtaWEl3SFFZRFZSME9CQllFRk5EbwpxdHAxMS9rdVNSZVlQSHNVWmREVjhsbE5NQTRHQTFVZER3RUIvd1FFQXdJQkJqQVNCZ05WSFJNQkFmOEVDREFHCkFRSC9BZ0VBTUFvR0NDcUdTTTQ5QkFNQ0EwZ0FNRVVDSVFDSmdUYnRWcU95WjFtM2pxaUFYTTZRWWE2cjVzV1MKNHkvRzd5OHVJSkd4ZHdJZ1JxUHZCU0t6elFhZ0JMUXE1czVBNzBwZG9pYVJKOHovMHVEejROZ1Y5MWs9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNqekNDQWpTZ0F3SUJBZ0lVSW1VTTFscWROSW56ZzdTVlVyOVFHemtuQnF3d0NnWUlLb1pJemowRUF3SXcKYURFYU1CZ0dBMVVFQXd3UlNXNTBaV3dnVTBkWUlGSnZiM1FnUTBFeEdqQVlCZ05WQkFvTUVVbHVkR1ZzSUVOdgpjbkJ2Y21GMGFXOXVNUlF3RWdZRFZRUUhEQXRUWVc1MFlTQkRiR0Z5WVRFTE1Ba0dBMVVFQ0F3Q1EwRXhDekFKCkJnTlZCQVlUQWxWVE1CNFhEVEU0TURVeU1URXdORFV4TUZvWERUUTVNVEl6TVRJek5UazFPVm93YURFYU1CZ0cKQTFVRUF3d1JTVzUwWld3Z1UwZFlJRkp2YjNRZ1EwRXhHakFZQmdOVkJBb01FVWx1ZEdWc0lFTnZjbkJ2Y21GMAphVzl1TVJRd0VnWURWUVFIREF0VFlXNTBZU0JEYkdGeVlURUxNQWtHQTFVRUNBd0NRMEV4Q3pBSkJnTlZCQVlUCkFsVlRNRmt3RXdZSEtvWkl6ajBDQVFZSUtvWkl6ajBEQVFjRFFnQUVDNm5Fd01ESVlaT2ovaVBXc0N6YUVLaTcKMU9pT1NMUkZoV0dqYm5CVkpmVm5rWTR1M0lqa0RZWUwwTXhPNG1xc3lZamxCYWxUVll4RlAyc0pCSzV6bEtPQgp1ekNCdURBZkJnTlZIU01FR0RBV2dCUWlaUXpXV3AwMGlmT0R0SlZTdjFBYk9TY0dyREJTQmdOVkhSOEVTekJKCk1FZWdSYUJEaGtGb2RIUndjem92TDJObGNuUnBabWxqWVhSbGN5NTBjblZ6ZEdWa2MyVnlkbWxqWlhNdWFXNTAKWld3dVkyOXRMMGx1ZEdWc1UwZFlVbTl2ZEVOQkxtUmxjakFkQmdOVkhRNEVGZ1FVSW1VTTFscWROSW56ZzdTVgpVcjlRR3prbkJxd3dEZ1lEVlIwUEFRSC9CQVFEQWdFR01CSUdBMVVkRXdFQi93UUlNQVlCQWY4Q0FRRXdDZ1lJCktvWkl6ajBFQXdJRFNRQXdSZ0loQU9XLzVRa1IrUzlDaVNEY05vb3dMdVBSTHNXR2YvWWk3R1NYOTRCZ3dUd2cKQWlFQTRKMGxySG9NcytYbzVvL3NYNk85UVd4SFJBdlpVR09kUlE3Y3ZxUlhhcUk9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KAA=="
})";

std::string sev_snp_quote = R"({
  "source": "sevsnp",
  "evidence": "AgAAAAIAAAAfAAMAAAAAAAEAAAAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAACAAAAAAAGXQEAAAAAAAAAAAAAAAAAAAAIebqLxUFNeClkL/A6LBA8wU4yNcH9toPXIilkiXu9pAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA7egmiApOGkGJipaBDvsJ8gcFE6uzVeiWUlZM0Y8dQ6egMdH/VEkNvWFofeEBtm7Rq2zP6m6MnGIzsaRjHP1kQOz5EGlLNNfpLgI2c4dYgx7Jd7YxN5Mm9yaAsdvoZmL6aQJIUWkv0us4lpcXm8svL3wLfrV2ayYju9fliLMU7TsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADBaTMJli6XmTLdGMhIQwna+cvhFRW0mlE5lSnZ/syuff//////////////////////////////////////////AgAAAAAABl0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACC56n0RuAHUmaVpDq9HgesfXJi+0SshmghSEuJ6H2NMYxNevZOsxVKp16LCwJsTG/PQAiSSeX05Y4Xc0VQr0bmAgAAAAAABl0BMwEAATMBAAIAAAAAAAZdAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIr/RXe35MB1ZUdct19i1+fYDJlXAah5pPGuZBMdsHAVtuxhUfKg6mgLLCpa3cLC4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMW3WN0MtbBffLaVNsNlsnVTrw0qC/qrQdniBfK345BiyIicVCgR6/Z5YZ6CmTpBy
  "endorsements": ""
})";

std::string ccf_quote = R"({
  "source": "openenclave",
  "evidence": "AwACAAAAAAAIAA0Ak5pyM/ecTKmUCg2zlX8GByV7poCkzztBEA1BOoP0LTUAAAAAExMCB/+ABgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwAAAAAAAAAHAAAAAAAAALeP4pMiKoH0SeTIMtUYw7pxwAMw8Ws+W566YVxxmmVNAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACCiGKoY+e5W3RnGrB8LXCK3byQBLkRa7HDaQHgHPo2ygAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADrpgbUZSlagWQQhAuovcJv1vbGFm+vpCppNSiXVoIJFgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARBAAAN5GPEjFFk7+dx6V44pcd79IxFx8LokJVP/B45EG/HLN/mMrhufYITcx36uJm6UoIdKcaKoXcoz8WTBdYhruM5dBWxRiC4Pxuqak78F0MDYo2IQy0PPTta8rsRgAZV3bfZj+xSqjHCfGZIhcoy7C1WCCXBlyL/EkDPTjDQqfJc4cExMCB/+ABgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFQAAAAAAAAAHAAAAAAAAAIzlhoW+NuRhh8Izx+me1v5127M/dWetohewd+zYz4L5AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACMT1d115ZQPpYTf3fGioKaAFasje1wFAsIGwlEkMV7/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADaeHiXlftEWtCNsuUhLnySVEgAQYfKtaGgDAAVzDMzdAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcjdb/gpJJjCXzwqWwcZ1cz9lU/9aat533bINRpsmCHW83mHzaooBW5iqfu9eH5K0H6Q3ln8dWV4PJGQVI9jROCAAAAECAwQFBgcICQoLDA0ODxAREhMUFRYXGBkaGxwdHh8FANwNAAAtLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJRWpUQ0NCRFNnQXdJQkFnSVZBTDEzdExSZURGVnFSZFc2L2s3ZG1HY0pCSXduTUFvR0NDcUdTTTQ5QkFNQwpNSEV4SXpBaEJnTlZCQU1NR2tsdWRHVnNJRk5IV0NCUVEwc2dVSEp2WTJWemMyOXlJRU5CTVJvd0dBWURWUVFLCkRCRkpiblJsYkNCRGIzSndiM0poZEdsdmJqRVVNQklHQTFVRUJ3d0xVMkZ1ZEdFZ1EyeGhjbUV4Q3pBSkJnTlYKQkFnTUFrTkJNUXN3Q1FZRFZRUUdFd0pWVXpBZUZ3MHlNakEzTVRjd01ETTVNak5hRncweU9UQTNNVGN3TURNNQpNak5hTUhBeElqQWdCZ05WQkFNTUdVbHVkR1ZzSUZOSFdDQlFRMHNnUTJWeWRHbG1hV05oZEdVeEdqQVlCZ05WCkJBb01FVWx1ZEdWc0lFTnZjbkJ2Y21GMGFXOXVNUlF3RWdZRFZRUUhEQXRUWVc1MFlTQkRiR0Z5WVRFTE1Ba0cKQTFVRUNBd0NRMEV4Q3pBSkJnTlZCQVlUQWxWVE1Ga3dFd1lIS29aSXpqMENBUVlJS29aSXpqMERBUWNEUWdBRQoxdGc4aDBhTDRDTW81cTZUV3JNa2IrWi8wWEs2ZU9Nc3NLYTEzbXZwWTZMUUN6ZnFzRDdvTUh5ODlHNVhmK2lrCkxxMW9mdlc4czdhV0RUSithMGExdEtPQ0FxZ3dnZ0trTUI4R0ExVWRJd1FZTUJhQUZORG9xdHAxMS9rdVNSZVkKUEhzVVpkRFY4bGxOTUd3R0ExVWRId1JsTUdNd1lhQmZvRjJHVzJoMGRIQnpPaTh2WVhCcExuUnlkWE4wWldSegpaWEoyYVdObGN5NXBiblJsYkM1amIyMHZjMmQ0TDJObGNuUnBabWxqWVhScGIyNHZkak12Y0dOclkzSnNQMk5oClBYQnliMk5sYzNOdmNpWmxibU52WkdsdVp6MWtaWEl3SFFZRFZSME9CQllFRkI1VmxaTitSaEdUVS9KMUpjeDcKbE5Sc0xpVXRNQTRHQTFVZER3RUIvd1FFQXdJR3dEQU1CZ05WSFJNQkFmOEVBakFBTUlJQjFBWUpLb1pJaHZoTgpBUTBCQklJQnhUQ0NBY0V3SGdZS0tvWklodmhOQVEwQkFRUVE3STA4cS9pZ3laYmh6S3FiblpTSDNqQ0NBV1FHCkNpcUdTSWI0VFFFTkFRSXdnZ0ZVTUJBR0N5cUdTSWI0VFFFTkFRSUJBZ0VSTUJBR0N5cUdTSWI0VFFFTkFRSUMKQWdFUk1CQUdDeXFHU0liNFRRRU5BUUlEQWdFQ01CQUdDeXFHU0liNFRRRU5BUUlFQWdFRU1CQUdDeXFHU0liNApUUUVOQVFJRkFnRUJNQkVHQ3lxR1NJYjRUUUVOQVFJR0FnSUFnREFRQmdzcWhraUcrRTBCRFFFQ0J3SUJCakFRCkJnc3Foa2lHK0UwQkRRRUNDQUlCQURBUUJnc3Foa2lHK0UwQkRRRUNDUUlCQURBUUJnc3Foa2lHK0UwQkRRRUMKQ2dJQkFEQVFCZ3NxaGtpRytFMEJEUUVDQ3dJQkFEQVFCZ3NxaGtpRytFMEJEUUVDREFJQkFEQVFCZ3NxaGtpRworRTBCRFFFQ0RRSUJBREFRQmdzcWhraUcrRTBCRFFFQ0RnSUJBREFRQmdzcWhraUcrRTBCRFFFQ0R3SUJBREFRCkJnc3Foa2lHK0UwQkRRRUNFQUlCQURBUUJnc3Foa2lHK0UwQkRRRUNFUUlCQ3pBZkJnc3Foa2lHK0UwQkRRRUMKRWdRUUVSRUNCQUdBQmdBQUFBQUFBQUFBQURBUUJnb3Foa2lHK0UwQkRRRURCQUlBQURBVUJnb3Foa2lHK0UwQgpEUUVFQkFZQWtHN1ZBQUF3RHdZS0tvWklodmhOQVEwQkJRb0JBREFLQmdncWhrak9QUVFEQWdOSEFEQkVBaUFVCkp5U1A3YkhpZjM2eEhEN2dmTTFHSEFGL1AvMy80azIzQ2k3OFAxTFQwZ0lnY3BqemNwbEJTbjNjSXMwNzNoY0QKREFxZ0U4L3NtdmNIdng5cDJ3TitBOG89Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNtRENDQWo2Z0F3SUJBZ0lWQU5Eb3F0cDExL2t1U1JlWVBIc1VaZERWOGxsTk1Bb0dDQ3FHU000OUJBTUMKTUdneEdqQVlCZ05WQkFNTUVVbHVkR1ZzSUZOSFdDQlNiMjkwSUVOQk1Sb3dHQVlEVlFRS0RCRkpiblJsYkNCRApiM0p3YjNKaGRHbHZiakVVTUJJR0ExVUVCd3dMVTJGdWRHRWdRMnhoY21FeEN6QUpCZ05WQkFnTUFrTkJNUXN3CkNRWURWUVFHRXdKVlV6QWVGdzB4T0RBMU1qRXhNRFV3TVRCYUZ3MHpNekExTWpFeE1EVXdNVEJhTUhFeEl6QWgKQmdOVkJBTU1Ha2x1ZEdWc0lGTkhXQ0JRUTBzZ1VISnZZMlZ6YzI5eUlFTkJNUm93R0FZRFZRUUtEQkZKYm5SbApiQ0JEYjNKd2IzSmhkR2x2YmpFVU1CSUdBMVVFQnd3TFUyRnVkR0VnUTJ4aGNtRXhDekFKQmdOVkJBZ01Ba05CCk1Rc3dDUVlEVlFRR0V3SlZVekJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCTDlxK05NcDJJT2cKdGRsMWJrL3VXWjUrVEdRbThhQ2k4ejc4ZnMrZktDUTNkK3VEelhuVlRBVDJaaERDaWZ5SXVKd3ZOM3dOQnA5aQpIQlNTTUpNSnJCT2pnYnN3Z2Jnd0h3WURWUjBqQkJnd0ZvQVVJbVVNMWxxZE5JbnpnN1NWVXI5UUd6a25CcXd3ClVnWURWUjBmQkVzd1NUQkhvRVdnUTRaQmFIUjBjSE02THk5alpYSjBhV1pwWTJGMFpYTXVkSEoxYzNSbFpITmwKY25acFkyVnpMbWx1ZEdWc0xtTnZiUzlKYm5SbGJGTkhXRkp2YjNSRFFTNWtaWEl3SFFZRFZSME9CQllFRk5EbwpxdHAxMS9rdVNSZVlQSHNVWmREVjhsbE5NQTRHQTFVZER3RUIvd1FFQXdJQkJqQVNCZ05WSFJNQkFmOEVDREFHCkFRSC9BZ0VBTUFvR0NDcUdTTTQ5QkFNQ0EwZ0FNRVVDSVFDSmdUYnRWcU95WjFtM2pxaUFYTTZRWWE2cjVzV1MKNHkvRzd5OHVJSkd4ZHdJZ1JxUHZCU0t6elFhZ0JMUXE1czVBNzBwZG9pYVJKOHovMHVEejROZ1Y5MWs9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNqekNDQWpTZ0F3SUJBZ0lVSW1VTTFscWROSW56ZzdTVlVyOVFHemtuQnF3d0NnWUlLb1pJemowRUF3SXcKYURFYU1CZ0dBMVVFQXd3UlNXNTBaV3dnVTBkWUlGSnZiM1FnUTBFeEdqQVlCZ05WQkFvTUVVbHVkR1ZzSUVOdgpjbkJ2Y21GMGFXOXVNUlF3RWdZRFZRUUhEQXRUWVc1MFlTQkRiR0Z5WVRFTE1Ba0dBMVVFQ0F3Q1EwRXhDekFKCkJnTlZCQVlUQWxWVE1CNFhEVEU0TURVeU1URXdORFV4TUZvWERUUTVNVEl6TVRJek5UazFPVm93YURFYU1CZ0cKQTFVRUF3d1JTVzUwWld3Z1UwZFlJRkp2YjNRZ1EwRXhHakFZQmdOVkJBb01FVWx1ZEdWc0lFTnZjbkJ2Y21GMAphVzl1TVJRd0VnWURWUVFIREF0VFlXNTBZU0JEYkdGeVlURUxNQWtHQTFVRUNBd0NRMEV4Q3pBSkJnTlZCQVlUCkFsVlRNRmt3RXdZSEtvWkl6ajBDQVFZSUtvWkl6ajBEQVFjRFFnQUVDNm5Fd01ESVlaT2ovaVBXc0N6YUVLaTcKMU9pT1NMUkZoV0dqYm5CVkpmVm5rWTR1M0lqa0RZWUwwTXhPNG1xc3lZamxCYWxUVll4RlAyc0pCSzV6bEtPQgp1ekNCdURBZkJnTlZIU01FR0RBV2dCUWlaUXpXV3AwMGlmT0R0SlZTdjFBYk9TY0dyREJTQmdOVkhSOEVTekJKCk1FZWdSYUJEaGtGb2RIUndjem92TDJObGNuUnBabWxqWVhSbGN5NTBjblZ6ZEdWa2MyVnlkbWxqWlhNdWFXNTAKWld3dVkyOXRMMGx1ZEdWc1UwZFlVbTl2ZEVOQkxtUmxjakFkQmdOVkhRNEVGZ1FVSW1VTTFscWROSW56ZzdTVgpVcjlRR3prbkJxd3dEZ1lEVlIwUEFRSC9CQVFEQWdFR01CSUdBMVVkRXdFQi93UUlNQVlCQWY4Q0FRRXdDZ1lJCktvWkl6ajBFQXdJRFNRQXdSZ0loQU9XLzVRa1IrUzlDaVNEY05vb3dMdVBSTHNXR2YvWWk3R1NYOTRCZ3dUd2cKQWlFQTRKMGxySG9NcytYbzVvL3NYNk85UVd4SFJBdlpVR09kUlE3Y3ZxUlhhcUk9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KAAEAAAAAAAAAAQAAAAAAAAAQAAAAAAAAACAAAAAAAAAAc2d4X3JlcG9ydF9kYXRhACBBCJEq1Dt5JKxc+t3zGUkIrrGfZaI58BNUMlIV6isy",
  "endorsements": ""
})";

std::string ccf_quote2 = R"({
  "source": "openenclave",
  "evidence": "AwACAAAAAAAIAA0Ak5pyM/ecTKmUCg2zlX8GByV7poCkzztBEA1BOoP0LTUAAAAAExMCB/+ABgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwAAAAAAAAAHAAAAAAAAANX+Rzy+ZYThgrrp0X/b7DqMponIJdiCctNlzE2ayBqfAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB2woKDPZpDQ4IL6oAnVtOybi9FZ/9r3MwHj8k1HycgtQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4/LQdFoMl9cmg3dNvy0yI3pukjafophvWTD3SUXc6gwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARBAAAE2WW9IxaJTRuz4ChD6BesaV8z3ZouUbSa6Q9URSxZH9MkA+eKR9Gu3ex2/kAfjka/36mOrsjJx23d8U06vAXJ5BWxRiC4Pxuqak78F0MDYo2IQy0PPTta8rsRgAZV3bfZj+xSqjHCfGZIhcoy7C1WCCXBlyL/EkDPTjDQqfJc4cExMCB/+ABgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFQAAAAAAAAAHAAAAAAAAAIzlhoW+NuRhh8Izx+me1v5127M/dWetohewd+zYz4L5AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACMT1d115ZQPpYTf3fGioKaAFasje1wFAsIGwlEkMV7/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADaeHiXlftEWtCNsuUhLnySVEgAQYfKtaGgDAAVzDMzdAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY3O8qXR3KHrm3dQGLHAnceZ4Gh+fP7PMtXMRcMKriXEP/giC+umDH4R8Z9eOYvMDfOpr+PjunNAnvqU8FDuQ+SAAAAECAwQFBgcICQoLDA0ODxAREhMUFRYXGBkaGxwdHh8FANwNAAAtLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJRWpUQ0NCRFNnQXdJQkFnSVZBTDEzdExSZURGVnFSZFc2L2s3ZG1HY0pCSXduTUFvR0NDcUdTTTQ5QkFNQwpNSEV4SXpBaEJnTlZCQU1NR2tsdWRHVnNJRk5IV0NCUVEwc2dVSEp2WTJWemMyOXlJRU5CTVJvd0dBWURWUVFLCkRCRkpiblJsYkNCRGIzSndiM0poZEdsdmJqRVVNQklHQTFVRUJ3d0xVMkZ1ZEdFZ1EyeGhjbUV4Q3pBSkJnTlYKQkFnTUFrTkJNUXN3Q1FZRFZRUUdFd0pWVXpBZUZ3MHlNakEzTVRjd01ETTVNak5hRncweU9UQTNNVGN3TURNNQpNak5hTUhBeElqQWdCZ05WQkFNTUdVbHVkR1ZzSUZOSFdDQlFRMHNnUTJWeWRHbG1hV05oZEdVeEdqQVlCZ05WCkJBb01FVWx1ZEdWc0lFTnZjbkJ2Y21GMGFXOXVNUlF3RWdZRFZRUUhEQXRUWVc1MFlTQkRiR0Z5WVRFTE1Ba0cKQTFVRUNBd0NRMEV4Q3pBSkJnTlZCQVlUQWxWVE1Ga3dFd1lIS29aSXpqMENBUVlJS29aSXpqMERBUWNEUWdBRQoxdGc4aDBhTDRDTW81cTZUV3JNa2IrWi8wWEs2ZU9Nc3NLYTEzbXZwWTZMUUN6ZnFzRDdvTUh5ODlHNVhmK2lrCkxxMW9mdlc4czdhV0RUSithMGExdEtPQ0FxZ3dnZ0trTUI4R0ExVWRJd1FZTUJhQUZORG9xdHAxMS9rdVNSZVkKUEhzVVpkRFY4bGxOTUd3R0ExVWRId1JsTUdNd1lhQmZvRjJHVzJoMGRIQnpPaTh2WVhCcExuUnlkWE4wWldSegpaWEoyYVdObGN5NXBiblJsYkM1amIyMHZjMmQ0TDJObGNuUnBabWxqWVhScGIyNHZkak12Y0dOclkzSnNQMk5oClBYQnliMk5sYzNOdmNpWmxibU52WkdsdVp6MWtaWEl3SFFZRFZSME9CQllFRkI1VmxaTitSaEdUVS9KMUpjeDcKbE5Sc0xpVXRNQTRHQTFVZER3RUIvd1FFQXdJR3dEQU1CZ05WSFJNQkFmOEVBakFBTUlJQjFBWUpLb1pJaHZoTgpBUTBCQklJQnhUQ0NBY0V3SGdZS0tvWklodmhOQVEwQkFRUVE3STA4cS9pZ3laYmh6S3FiblpTSDNqQ0NBV1FHCkNpcUdTSWI0VFFFTkFRSXdnZ0ZVTUJBR0N5cUdTSWI0VFFFTkFRSUJBZ0VSTUJBR0N5cUdTSWI0VFFFTkFRSUMKQWdFUk1CQUdDeXFHU0liNFRRRU5BUUlEQWdFQ01CQUdDeXFHU0liNFRRRU5BUUlFQWdFRU1CQUdDeXFHU0liNApUUUVOQVFJRkFnRUJNQkVHQ3lxR1NJYjRUUUVOQVFJR0FnSUFnREFRQmdzcWhraUcrRTBCRFFFQ0J3SUJCakFRCkJnc3Foa2lHK0UwQkRRRUNDQUlCQURBUUJnc3Foa2lHK0UwQkRRRUNDUUlCQURBUUJnc3Foa2lHK0UwQkRRRUMKQ2dJQkFEQVFCZ3NxaGtpRytFMEJEUUVDQ3dJQkFEQVFCZ3NxaGtpRytFMEJEUUVDREFJQkFEQVFCZ3NxaGtpRworRTBCRFFFQ0RRSUJBREFRQmdzcWhraUcrRTBCRFFFQ0RnSUJBREFRQmdzcWhraUcrRTBCRFFFQ0R3SUJBREFRCkJnc3Foa2lHK0UwQkRRRUNFQUlCQURBUUJnc3Foa2lHK0UwQkRRRUNFUUlCQ3pBZkJnc3Foa2lHK0UwQkRRRUMKRWdRUUVSRUNCQUdBQmdBQUFBQUFBQUFBQURBUUJnb3Foa2lHK0UwQkRRRURCQUlBQURBVUJnb3Foa2lHK0UwQgpEUUVFQkFZQWtHN1ZBQUF3RHdZS0tvWklodmhOQVEwQkJRb0JBREFLQmdncWhrak9QUVFEQWdOSEFEQkVBaUFVCkp5U1A3YkhpZjM2eEhEN2dmTTFHSEFGL1AvMy80azIzQ2k3OFAxTFQwZ0lnY3BqemNwbEJTbjNjSXMwNzNoY0QKREFxZ0U4L3NtdmNIdng5cDJ3TitBOG89Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNtRENDQWo2Z0F3SUJBZ0lWQU5Eb3F0cDExL2t1U1JlWVBIc1VaZERWOGxsTk1Bb0dDQ3FHU000OUJBTUMKTUdneEdqQVlCZ05WQkFNTUVVbHVkR1ZzSUZOSFdDQlNiMjkwSUVOQk1Sb3dHQVlEVlFRS0RCRkpiblJsYkNCRApiM0p3YjNKaGRHbHZiakVVTUJJR0ExVUVCd3dMVTJGdWRHRWdRMnhoY21FeEN6QUpCZ05WQkFnTUFrTkJNUXN3CkNRWURWUVFHRXdKVlV6QWVGdzB4T0RBMU1qRXhNRFV3TVRCYUZ3MHpNekExTWpFeE1EVXdNVEJhTUhFeEl6QWgKQmdOVkJBTU1Ha2x1ZEdWc0lGTkhXQ0JRUTBzZ1VISnZZMlZ6YzI5eUlFTkJNUm93R0FZRFZRUUtEQkZKYm5SbApiQ0JEYjNKd2IzSmhkR2x2YmpFVU1CSUdBMVVFQnd3TFUyRnVkR0VnUTJ4aGNtRXhDekFKQmdOVkJBZ01Ba05CCk1Rc3dDUVlEVlFRR0V3SlZVekJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCTDlxK05NcDJJT2cKdGRsMWJrL3VXWjUrVEdRbThhQ2k4ejc4ZnMrZktDUTNkK3VEelhuVlRBVDJaaERDaWZ5SXVKd3ZOM3dOQnA5aQpIQlNTTUpNSnJCT2pnYnN3Z2Jnd0h3WURWUjBqQkJnd0ZvQVVJbVVNMWxxZE5JbnpnN1NWVXI5UUd6a25CcXd3ClVnWURWUjBmQkVzd1NUQkhvRVdnUTRaQmFIUjBjSE02THk5alpYSjBhV1pwWTJGMFpYTXVkSEoxYzNSbFpITmwKY25acFkyVnpMbWx1ZEdWc0xtTnZiUzlKYm5SbGJGTkhXRkp2YjNSRFFTNWtaWEl3SFFZRFZSME9CQllFRk5EbwpxdHAxMS9rdVNSZVlQSHNVWmREVjhsbE5NQTRHQTFVZER3RUIvd1FFQXdJQkJqQVNCZ05WSFJNQkFmOEVDREFHCkFRSC9BZ0VBTUFvR0NDcUdTTTQ5QkFNQ0EwZ0FNRVVDSVFDSmdUYnRWcU95WjFtM2pxaUFYTTZRWWE2cjVzV1MKNHkvRzd5OHVJSkd4ZHdJZ1JxUHZCU0t6elFhZ0JMUXE1czVBNzBwZG9pYVJKOHovMHVEejROZ1Y5MWs9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNqekNDQWpTZ0F3SUJBZ0lVSW1VTTFscWROSW56ZzdTVlVyOVFHemtuQnF3d0NnWUlLb1pJemowRUF3SXcKYURFYU1CZ0dBMVVFQXd3UlNXNTBaV3dnVTBkWUlGSnZiM1FnUTBFeEdqQVlCZ05WQkFvTUVVbHVkR1ZzSUVOdgpjbkJ2Y21GMGFXOXVNUlF3RWdZRFZRUUhEQXRUWVc1MFlTQkRiR0Z5WVRFTE1Ba0dBMVVFQ0F3Q1EwRXhDekFKCkJnTlZCQVlUQWxWVE1CNFhEVEU0TURVeU1URXdORFV4TUZvWERUUTVNVEl6TVRJek5UazFPVm93YURFYU1CZ0cKQTFVRUF3d1JTVzUwWld3Z1UwZFlJRkp2YjNRZ1EwRXhHakFZQmdOVkJBb01FVWx1ZEdWc0lFTnZjbkJ2Y21GMAphVzl1TVJRd0VnWURWUVFIREF0VFlXNTBZU0JEYkdGeVlURUxNQWtHQTFVRUNBd0NRMEV4Q3pBSkJnTlZCQVlUCkFsVlRNRmt3RXdZSEtvWkl6ajBDQVFZSUtvWkl6ajBEQVFjRFFnQUVDNm5Fd01ESVlaT2ovaVBXc0N6YUVLaTcKMU9pT1NMUkZoV0dqYm5CVkpmVm5rWTR1M0lqa0RZWUwwTXhPNG1xc3lZamxCYWxUVll4RlAyc0pCSzV6bEtPQgp1ekNCdURBZkJnTlZIU01FR0RBV2dCUWlaUXpXV3AwMGlmT0R0SlZTdjFBYk9TY0dyREJTQmdOVkhSOEVTekJKCk1FZWdSYUJEaGtGb2RIUndjem92TDJObGNuUnBabWxqWVhSbGN5NTBjblZ6ZEdWa2MyVnlkbWxqWlhNdWFXNTAKWld3dVkyOXRMMGx1ZEdWc1UwZFlVbTl2ZEVOQkxtUmxjakFkQmdOVkhRNEVGZ1FVSW1VTTFscWROSW56ZzdTVgpVcjlRR3prbkJxd3dEZ1lEVlIwUEFRSC9CQVFEQWdFR01CSUdBMVVkRXdFQi93UUlNQVlCQWY4Q0FRRXdDZ1lJCktvWkl6ajBFQXdJRFNRQXdSZ0loQU9XLzVRa1IrUzlDaVNEY05vb3dMdVBSTHNXR2YvWWk3R1NYOTRCZ3dUd2cKQWlFQTRKMGxySG9NcytYbzVvL3NYNk85UVd4SFJBdlpVR09kUlE3Y3ZxUlhhcUk9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KAAEAAAAAAAAAAQAAAAAAAAAQAAAAAAAAACAAAAAAAAAAc2d4X3JlcG9ydF9kYXRhAM1JnZUFVCdkB8J7guZYRblNhIWNP9Mlm4Q1qwqw3FkA",
  "endorsements": ""
})";

/* clang-format on */

std::shared_ptr<HTTPClient> http_client =
  std::make_shared<AsynchronousHTTPClient>(
    default_options.http_timeout,
    default_options.http_max_attempts,
    default_options.verbosity > 0);

#ifndef RAVL_USE_OE_VERIFIER
// These attestations contain expired endorsements and the OE verifier doesn't
// seem to have a flag to disable expiry checks.

TEST_CASE("Open Enclave CoffeeLake")
{
  auto att = parse_attestation(oe_coffeelake_attestation);
  std::shared_ptr<ravl::Claims> claims;
  REQUIRE_NOTHROW(
    claims = verify_synchronized(att, default_options, http_client));
}

TEST_CASE("Open Enclave IceLake")
{
  auto att = parse_attestation(oe_icelake_attestation);
  std::shared_ptr<ravl::Claims> claims;
  REQUIRE_NOTHROW(
    claims = verify_synchronized(att, default_options, http_client));
}
#endif

TEST_CASE("Open Enclave CoffeeLake w/o endorsements")
{
  auto options = default_options;
  options.historical = true;
  auto att = parse_attestation(oe_coffeelake_attestation);
  att->endorsements = {};
  std::shared_ptr<ravl::Claims> claims;
  REQUIRE_NOTHROW(claims = verify_synchronized(att, options, http_client));
  auto sc = Claims::get<ravl::oe::Claims>(claims);
  REQUIRE(
    to_hex(sc->sgx_claims->report_body.mr_enclave) ==
    "bf8689a1fdb3828efa56d9f23a1524ec1f1641968a811165b704cf6178f7e00b");
  REQUIRE(sc->custom_claims.contains("some_name"));

  std::vector<uint8_t> expected_value = {
    's', 'o', 'm', 'e', '_', 'v', 'a', 'l', 'u', 'e', 0};
  REQUIRE(sc->custom_claims["some_name"] == expected_value);
}

TEST_CASE("Open Enclave CoffeeLake w/o custom claims")
{
  auto att = parse_attestation(oe_no_custom_claims);
  std::shared_ptr<ravl::Claims> claims;
  REQUIRE_NOTHROW(
    claims = verify_synchronized(att, default_options, http_client));
}

TEST_CASE("Open Enclave IceLake w/o endorsements")
{
  auto options = default_options;
  options.historical = true;
  auto att = parse_attestation(oe_icelake_attestation);
  att->endorsements = {};
  std::shared_ptr<ravl::Claims> claims;
  REQUIRE_NOTHROW(claims = verify_synchronized(att, options, http_client));
  auto sc = Claims::get<ravl::oe::Claims>(claims);
  REQUIRE(
    to_hex(sc->sgx_claims->report_body.mr_enclave) ==
    "dd723980d7534e75313bddbb14341d63a0357b91d9e136998fdda0e220b664c8");
}

TEST_CASE("SGX CoffeeLake")
{
  auto att = parse_attestation(coffeelake_quote);
  std::shared_ptr<ravl::Claims> claims;
  REQUIRE_NOTHROW(
    claims = verify_synchronized(att, default_options, http_client));
  auto sc = Claims::get<ravl::sgx::Claims>(claims);
  REQUIRE(
    to_hex(sc->report_body.mr_enclave) ==
    "bf8689a1fdb3828efa56d9f23a1524ec1f1641968a811165b704cf6178f7e00b");
}

TEST_CASE("SGX CoffeeLake w/o endorsements")
{
  auto options = default_options;
  options.historical = true;
  auto att = parse_attestation(coffeelake_quote);
  att->endorsements = {};
  std::shared_ptr<ravl::Claims> claims;
  REQUIRE_NOTHROW(claims = verify_synchronized(att, options, http_client));
}

TEST_CASE("SGX IceLake")
{
  auto att = parse_attestation(icelake_quote);
  std::shared_ptr<ravl::Claims> claims;
  REQUIRE_NOTHROW(
    claims = verify_synchronized(att, default_options, http_client));
}

TEST_CASE("SGX IceLake w/o endorsements")
{
  auto options = default_options;
  options.historical = true;
  auto att = parse_attestation(icelake_quote);
  att->endorsements = {};
  std::shared_ptr<ravl::Claims> claims;
  REQUIRE_NOTHROW(claims = verify_synchronized(att, options, http_client));
}

TEST_CASE("SGX SDK QE Quote3")
{
  auto options = default_options;
  options.historical = true;
  auto att = parse_attestation(sgx_sdk_qe_quote3);
  std::shared_ptr<ravl::Claims> claims;
  REQUIRE_NOTHROW(claims = verify_synchronized(att, options, http_client));
}

TEST_CASE("SGX SDK QE Quote3 w/o endorsements")
{
  auto options = default_options;
  options.historical = true;
  auto att = parse_attestation(sgx_sdk_qe_quote3);
  att->endorsements = {};
  std::shared_ptr<ravl::Claims> claims;
  REQUIRE_NOTHROW(claims = verify_synchronized(att, options, http_client));
}

TEST_CASE("SGX with endorsements from cache")
{
  auto att = parse_attestation(coffeelake_quote);
  att->endorsements = {};
  Options options = default_options;
  options.sgx_endorsement_cache_url_template =
    "https://global.acccache.azure.net/sgx/certification/v3/"
    "{}?uri={}&clientid=production_client&api-version=2020-02-12-preview";
  std::shared_ptr<ravl::Claims> claims;
  REQUIRE_NOTHROW(claims = verify_synchronized(att, options, http_client));
}

TEST_CASE("SEV/SNP")
{
  auto att = parse_attestation(sev_snp_quote);
  std::shared_ptr<ravl::Claims> claims;
  REQUIRE_NOTHROW(
    claims = verify_synchronized(att, default_options, http_client));
  auto sc = Claims::get<ravl::sev_snp::Claims>(claims);
  REQUIRE(
    to_hex(sc->measurement) ==
    "ede826880a4e1a41898a96810efb09f2070513abb355e89652564cd18f1d43a7a031d1ff54"
    "490dbd61687de101b66ed1");
}

TEST_CASE("SEV/SNP w/o endorsements")
{
  auto att = parse_attestation(sev_snp_quote);
  att->endorsements = {};
  std::shared_ptr<ravl::Claims> claims;
  REQUIRE_NOTHROW(
    claims = verify_synchronized(att, default_options, http_client));
}

TEST_CASE("SEV/SNP with endorsements from cache")
{
  auto att = parse_attestation(sev_snp_quote);
  att->endorsements = {};
  Options options = default_options;
  options.sev_snp_endorsement_cache_url_template =
    "https://global.acccache.azure.net/SevSnpVM/certificates/{}/"
    "{}?api-version=2020-10-15-preview";
  std::shared_ptr<ravl::Claims> claims;
  REQUIRE_NOTHROW(claims = verify_synchronized(att, options, http_client));
}

TEST_CASE("SEV/SNP synchronous")
{
  auto att = parse_attestation(sev_snp_quote);
  att->endorsements = {};
  std::shared_ptr<ravl::Claims> claims;
  REQUIRE_NOTHROW(claims = verify_synchronous(att, default_options));
}

TEST_CASE("SGX CoffeeLake synchronous")
{
  auto options = default_options;
  options.historical = true;
  auto att = parse_attestation(coffeelake_quote);
  att->endorsements = {};
  std::shared_ptr<ravl::Claims> claims;
  REQUIRE_NOTHROW(claims = verify_synchronous(att, options));
}

TEST_CASE("CCF quote")
{
  auto att = parse_attestation(ccf_quote);
  std::shared_ptr<ravl::Claims> claims;
  REQUIRE_NOTHROW(claims = verify_synchronized(att, default_options));
  auto sc = Claims::get<ravl::oe::Claims>(claims);
  REQUIRE(sc->custom_claims.contains("sgx_report_data"));
}

TEST_CASE("CCF quote 2")
{
  auto att = parse_attestation(ccf_quote2);
  std::shared_ptr<ravl::Claims> claims;
  REQUIRE_NOTHROW(claims = verify_synchronized(att, default_options));
  auto sc = Claims::get<ravl::oe::Claims>(claims);
  REQUIRE(sc->custom_claims.contains("sgx_report_data"));
}

TEST_CASE("SGX CoffeeLake asynchronous")
{
  auto options = default_options;
  options.historical = true;
  const auto& opts = default_options;
  auto att = parse_attestation(coffeelake_quote);
  att->endorsements = {};

  std::shared_ptr<ravl::Claims> claims;

  try
  {
    AttestationRequestTracker tracker;
    auto id = tracker.submit(
      options,
      att,
      std::make_shared<AsynchronousHTTPClient>(
        opts.http_timeout, opts.http_max_attempts, opts.verbosity > 0));

    std::thread t([&tracker, id, &claims]() {
      try
      {
        while (!tracker.completed(id))
          std::this_thread::sleep_for(std::chrono::milliseconds(100));
        claims = tracker.result(id);
      }
      catch (...)
      {}
    });

    t.join();
  }
  catch (const std::exception& ex)
  {
    FAIL(ex.what());
  }
  catch (...)
  {
    FAIL("unexpected exception");
  }

  auto sc = Claims::get<ravl::sgx::Claims>(claims);
  REQUIRE(
    to_hex(sc->report_body.mr_enclave) ==
    "bf8689a1fdb3828efa56d9f23a1524ec1f1641968a811165b704cf6178f7e00b");
}

TEST_CASE("SEV/SNP asynchronous")
{
  const auto& opts = default_options;
  auto att = parse_attestation(sev_snp_quote);
  att->endorsements = {};

  std::shared_ptr<ravl::Claims> claims;
  try
  {
    AttestationRequestTracker tracker;
    auto id = tracker.submit(
      default_options,
      att,
      std::make_shared<AsynchronousHTTPClient>(
        opts.http_timeout, opts.http_max_attempts, opts.verbosity > 0));

    std::thread t([&tracker, id, &claims]() {
      try
      {
        while (!tracker.completed(id))
          std::this_thread::sleep_for(std::chrono::milliseconds(100));
        claims = tracker.result(id);
      }
      catch (...)
      {}
    });

    t.join();
  }
  catch (const std::exception& ex)
  {
    FAIL(ex.what());
  }
  catch (...)
  {
    FAIL("unexpected exception");
  }

  auto sc = Claims::get<ravl::sev_snp::Claims>(claims);
  REQUIRE(
    to_hex(sc->measurement) ==
    "ede826880a4e1a41898a96810efb09f2070513abb355e89652564cd18f1d43a7a031d1ff54"
    "490dbd61687de101b66ed1");
}

TEST_CASE("Open Enclave CoffeeLake JSON claims")
{
  auto att = parse_attestation(oe_coffeelake_attestation);
  std::shared_ptr<ravl::Claims> claims;
  REQUIRE_NOTHROW(
    claims = verify_synchronized(att, default_options, http_client));

  auto oec = Claims::get<ravl::oe::Claims>(claims);

  auto s = claims->to_json();
  auto nj = nlohmann::json::parse(s);
  REQUIRE(nj.contains("sgx_claims"));

  oec->sgx_claims = nullptr;
  s = claims->to_json();
  nj = nlohmann::json::parse(s);
  REQUIRE(nj.contains("sgx_claims"));
  REQUIRE(nj["sgx_claims"] == nullptr);
}

TEST_CASE("SEV/SNP JSON claims")
{
  auto att = parse_attestation(sev_snp_quote);
  std::shared_ptr<ravl::Claims> claims;
  REQUIRE_NOTHROW(
    claims = verify_synchronized(att, default_options, http_client));

  auto sc = Claims::get<ravl::sev_snp::Claims>(claims);

  auto s = claims->to_json();
  auto nj = nlohmann::json::parse(s);
  REQUIRE(nj.contains("endorsements"));
  REQUIRE(nj["endorsements"].contains("vcek_issuer_chain_crl"));

  sc->endorsements.vcek_issuer_chain_crl = std::nullopt;
  s = claims->to_json();
  nj = nlohmann::json::parse(s);
  REQUIRE(nj.contains("endorsements"));
  REQUIRE(nj["endorsements"].contains("vcek_issuer_chain_crl"));

  REQUIRE(nj["endorsements"]["vcek_issuer_chain_crl"] == nullptr);
}

TEST_CASE("Open Enclave CoffeeLake CBOR")
{
  auto cbor = parse_attestation(oe_coffeelake_attestation)->cbor();
  auto att2 = parse_attestation_cbor(cbor);

  std::shared_ptr<ravl::Claims> claims;
  REQUIRE_NOTHROW(
    claims = verify_synchronized(att2, default_options, http_client));

  auto oec = Claims::get<ravl::oe::Claims>(claims);

  auto s = claims->to_json();
  auto nj = nlohmann::json::parse(s);
  REQUIRE(nj.contains("sgx_claims"));

  oec->sgx_claims = nullptr;
  s = claims->to_json();
  nj = nlohmann::json::parse(s);
  REQUIRE(nj.contains("sgx_claims"));
  REQUIRE(nj["sgx_claims"] == nullptr);
}

TEST_CASE("PCK certificate chain compression")
{
  auto generic_att = parse_attestation(coffeelake_quote);
  auto att = std::dynamic_pointer_cast<sgx::Attestation>(generic_att);

  REQUIRE_NOTHROW(verify_synchronized(att, default_options, http_client));

  auto cbor_before = att->cbor();
  att->compress_pck_certificate_chain();
  auto cbor_after = att->cbor();

  std::shared_ptr<ravl::Claims> claims;
  REQUIRE_NOTHROW(
    claims = verify_synchronized(att, default_options, http_client));

  REQUIRE(claims != nullptr);
  REQUIRE(cbor_after.size() < cbor_before.size());
}